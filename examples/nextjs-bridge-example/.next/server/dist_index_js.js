/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "dist_index_js";
exports.ids = ["dist_index_js"];
exports.modules = {

/***/ "../../dist/bridge.js":
/*!****************************!*\
  !*** ../../dist/bridge.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bridge = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"../../node_modules/ethers/lib.commonjs/index.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"../../dist/constants.js\");\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"axios\"));\n/**\n * Bridge class for bridging tokens between chains\n */\nclass Bridge {\n    /**\n     * Create a new Bridge instance\n     * @param providerOrSigner An ethers Provider or Signer\n     */\n    constructor(providerOrSigner) {\n        if ('provider' in providerOrSigner && typeof providerOrSigner.provider !== 'undefined') {\n            // It's a signer\n            this.signer = providerOrSigner;\n            this.provider = providerOrSigner.provider;\n        }\n        else {\n            // It's a provider\n            this.provider = providerOrSigner;\n        }\n    }\n    /**\n     * Check if the bridge has a signer\n     * @returns True if the bridge has a signer\n     * @private\n     */\n    hasSigner() {\n        if (!this.signer) {\n            throw new Error('This operation requires a signer');\n        }\n        return true;\n    }\n    /**\n     * Get the BNB price in USD\n     * @returns The BNB price in USD\n     */\n    async getBnbPrice() {\n        try {\n            const response = await axios_1.default.get('https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BNB&tsyms=USD');\n            return response.data.RAW.BNB.USD.PRICE;\n        }\n        catch (error) {\n            console.error('Error fetching BNB price:', error);\n            throw new Error('Failed to fetch BNB price');\n        }\n    }\n    /**\n     * Estimate the fee for bridging EDU tokens from BSC to Arbitrum\n     * @param amount Amount of EDU tokens to bridge\n     * @param address User's address\n     * @param gasOnDestination Amount of ETH to receive on Arbitrum for gas (in ETH)\n     * @returns The estimated fee in BNB\n     */\n    async estimateBridgeFee(amount, address, gasOnDestination = '0.0005') {\n        this.hasSigner();\n        try {\n            // BSC OFT contract address\n            const bscOft = '0x67fb304001aD03C282266B965b51E97Aa54A2FAB';\n            // EDU token on BSC\n            const eduTokenAddress = '0xBdEAe1cA48894A1759A8374D63925f21f2Ee2639';\n            // Get EDU token decimals\n            const eduContract = new ethers_1.ethers.Contract(eduTokenAddress, ['function decimals() view returns (uint8)'], this.provider);\n            const decimals = await eduContract.decimals();\n            // Create contract instance\n            const bscOftContract = new ethers_1.ethers.Contract(bscOft, constants_1.BSC_ABI, this.provider);\n            // LayerZero chainId for Arbitrum\n            const dstChainId = 110;\n            // Parse amount with correct decimals\n            const amountBigInt = ethers_1.ethers.parseUnits(amount, decimals);\n            // Don't use ZRO token for payment\n            const useZro = 0;\n            // Encode the destination address\n            const toAddress = ethers_1.ethers.zeroPadValue(address, 32);\n            // Adapter params type\n            const type = 2;\n            // Gas limit for the transaction on the destination chain\n            const gasLimit = 500000;\n            // Amount of ETH to airdrop on the destination chain for gas\n            const gasAirdrop = ethers_1.ethers.parseEther(gasOnDestination);\n            // Encode the adapter params\n            const adapterParams = ethers_1.ethers.solidityPacked(['uint16', 'uint256', 'uint256', 'address'], [type, gasLimit, gasAirdrop, address]);\n            // Estimate the fee\n            const result = await bscOftContract.estimateSendFee(dstChainId, toAddress, amountBigInt, useZro, adapterParams);\n            // Return the fee in BNB\n            return ethers_1.ethers.formatEther(result[0]);\n        }\n        catch (error) {\n            console.error('Error estimating bridge fee:', error);\n            throw new Error('Failed to estimate bridge fee');\n        }\n    }\n    /**\n     * Check if the user has enough BNB for the bridge transaction\n     * @param address User's address\n     * @param fee Estimated fee in BNB\n     * @returns True if the user has enough BNB\n     */\n    async hasEnoughBnb(address, fee) {\n        try {\n            const balance = await this.provider.getBalance(address);\n            return ethers_1.ethers.getBigInt(balance) >= ethers_1.ethers.parseEther(fee);\n        }\n        catch (error) {\n            console.error('Error checking BNB balance:', error);\n            throw new Error('Failed to check BNB balance');\n        }\n    }\n    /**\n     * Check if the user has enough EDU tokens for the bridge transaction\n     * @param address User's address\n     * @param amount Amount of EDU tokens to bridge\n     * @returns True if the user has enough EDU tokens\n     */\n    async hasEnoughEdu(address, amount) {\n        try {\n            // EDU token on BSC\n            const eduTokenAddress = '0xBdEAe1cA48894A1759A8374D63925f21f2Ee2639';\n            // Get EDU token decimals and balance\n            const eduContract = new ethers_1.ethers.Contract(eduTokenAddress, [\n                'function decimals() view returns (uint8)',\n                'function balanceOf(address) view returns (uint256)'\n            ], this.provider);\n            const decimals = await eduContract.decimals();\n            const balance = await eduContract.balanceOf(address);\n            return ethers_1.ethers.getBigInt(balance) >= ethers_1.ethers.parseUnits(amount, decimals);\n        }\n        catch (error) {\n            console.error('Error checking EDU balance:', error);\n            throw new Error('Failed to check EDU balance');\n        }\n    }\n    /**\n     * Approve EDU tokens for the bridge\n     * @param amount Amount of EDU tokens to approve\n     * @returns Transaction response\n     */\n    async approveEdu(amount) {\n        this.hasSigner();\n        try {\n            // EDU token on BSC\n            const eduTokenAddress = '0xBdEAe1cA48894A1759A8374D63925f21f2Ee2639';\n            // BSC OFT contract address\n            const bscOft = '0x67fb304001aD03C282266B965b51E97Aa54A2FAB';\n            // Get EDU token decimals\n            const eduContract = new ethers_1.ethers.Contract(eduTokenAddress, [\n                'function decimals() view returns (uint8)',\n                'function approve(address, uint256) returns (bool)'\n            ], this.signer);\n            const decimals = await eduContract.decimals();\n            // Approve the maximum amount\n            return eduContract.approve(bscOft, ethers_1.ethers.MaxUint256);\n        }\n        catch (error) {\n            console.error('Error approving EDU tokens:', error);\n            throw new Error('Failed to approve EDU tokens');\n        }\n    }\n    /**\n     * Check if EDU tokens are approved for the bridge\n     * @param address User's address\n     * @param amount Amount of EDU tokens to bridge\n     * @returns True if EDU tokens are approved\n     */\n    async isEduApproved(address, amount) {\n        try {\n            // EDU token on BSC\n            const eduTokenAddress = '0xBdEAe1cA48894A1759A8374D63925f21f2Ee2639';\n            // BSC OFT contract address\n            const bscOft = '0x67fb304001aD03C282266B965b51E97Aa54A2FAB';\n            // Get EDU token decimals and allowance\n            const eduContract = new ethers_1.ethers.Contract(eduTokenAddress, [\n                'function decimals() view returns (uint8)',\n                'function allowance(address, address) view returns (uint256)'\n            ], this.provider);\n            const decimals = await eduContract.decimals();\n            const allowance = await eduContract.allowance(address, bscOft);\n            return ethers_1.ethers.getBigInt(allowance) >= ethers_1.ethers.parseUnits(amount, decimals);\n        }\n        catch (error) {\n            console.error('Error checking EDU allowance:', error);\n            throw new Error('Failed to check EDU allowance');\n        }\n    }\n    /**\n     * Bridge EDU tokens from BSC to Arbitrum\n     * @param amount Amount of EDU tokens to bridge\n     * @param address User's address\n     * @param gasOnDestination Amount of ETH to receive on Arbitrum for gas (in ETH)\n     * @returns Transaction response\n     */\n    async bridgeEduFromBscToArb(amount, address, gasOnDestination = '0.0005') {\n        this.hasSigner();\n        try {\n            // BSC OFT contract address\n            const bscOft = '0x67fb304001aD03C282266B965b51E97Aa54A2FAB';\n            // EDU token on BSC\n            const eduTokenAddress = '0xBdEAe1cA48894A1759A8374D63925f21f2Ee2639';\n            // Get EDU token decimals\n            const eduContract = new ethers_1.ethers.Contract(eduTokenAddress, ['function decimals() view returns (uint8)'], this.provider);\n            const decimals = await eduContract.decimals();\n            // Create contract instance\n            const bscOftContract = new ethers_1.ethers.Contract(bscOft, constants_1.BSC_ABI, this.signer);\n            // LayerZero chainId for Arbitrum\n            const dstChainId = 110;\n            // Parse amount with correct decimals\n            const amountBigInt = ethers_1.ethers.parseUnits(amount, decimals);\n            // Encode the destination address\n            const toAddress = ethers_1.ethers.zeroPadValue(address, 32);\n            // Adapter params type\n            const type = 2;\n            // Gas limit for the transaction on the destination chain\n            const gasLimit = 500000;\n            // Amount of ETH to airdrop on the destination chain for gas\n            const gasAirdrop = ethers_1.ethers.parseEther(gasOnDestination);\n            // Encode the adapter params\n            const adapterParams = ethers_1.ethers.solidityPacked(['uint16', 'uint256', 'uint256', 'address'], [type, gasLimit, gasAirdrop, address]);\n            // Estimate the fee\n            const result = await bscOftContract.estimateSendFee(dstChainId, toAddress, amountBigInt, 0, // useZro\n            adapterParams);\n            // Execute the bridge transaction\n            return bscOftContract.sendFrom(address, dstChainId, toAddress, amountBigInt, {\n                refundAddress: address,\n                zroPaymentAddress: address,\n                adapterParams: adapterParams,\n            }, {\n                value: result[0],\n            });\n        }\n        catch (error) {\n            console.error('Error bridging EDU tokens:', error);\n            throw new Error('Failed to bridge EDU tokens');\n        }\n    }\n    /**\n     * Check if EDU tokens are approved for the bridge on Arbitrum\n     * @param address User's address\n     * @param amount Amount of EDU tokens to bridge\n     * @returns True if EDU tokens are approved\n     */\n    async isEduApprovedOnArb(address, amount) {\n        try {\n            // EDU token on Arbitrum\n            const eduTokenAddress = '0xf8173a39c56a554837C4C7f104153A005D284D11';\n            // Contract address for bridging from Arbitrum to EDUCHAIN\n            const contractAddr = '0x590044e628ea1B9C10a86738Cf7a7eeF52D031B8';\n            // Get EDU token decimals and allowance\n            const eduContract = new ethers_1.ethers.Contract(eduTokenAddress, [\n                'function decimals() view returns (uint8)',\n                'function allowance(address, address) view returns (uint256)'\n            ], this.provider);\n            const decimals = await eduContract.decimals();\n            const allowance = await eduContract.allowance(address, contractAddr);\n            return ethers_1.ethers.getBigInt(allowance) >= ethers_1.ethers.parseUnits(amount, decimals);\n        }\n        catch (error) {\n            console.error('Error checking EDU allowance on Arbitrum:', error);\n            throw new Error('Failed to check EDU allowance on Arbitrum');\n        }\n    }\n    /**\n     * Approve EDU tokens for the bridge on Arbitrum\n     * @param amount Amount of EDU tokens to approve\n     * @returns Transaction response\n     */\n    async approveEduOnArb(amount) {\n        this.hasSigner();\n        try {\n            // EDU token on Arbitrum\n            const eduTokenAddress = '0xf8173a39c56a554837C4C7f104153A005D284D11';\n            // Contract address for bridging from Arbitrum to EDUCHAIN\n            const contractAddr = '0x590044e628ea1B9C10a86738Cf7a7eeF52D031B8';\n            // Get EDU token decimals\n            const eduContract = new ethers_1.ethers.Contract(eduTokenAddress, [\n                'function decimals() view returns (uint8)',\n                'function approve(address, uint256) returns (bool)'\n            ], this.signer);\n            // Approve the maximum amount\n            return eduContract.approve(contractAddr, ethers_1.ethers.MaxUint256);\n        }\n        catch (error) {\n            console.error('Error approving EDU tokens on Arbitrum:', error);\n            throw new Error('Failed to approve EDU tokens on Arbitrum');\n        }\n    }\n    /**\n     * Check if the user has enough EDU tokens on Arbitrum for the bridge transaction\n     * @param address User's address\n     * @param amount Amount of EDU tokens to bridge\n     * @returns True if the user has enough EDU tokens\n     */\n    async hasEnoughEduOnArb(address, amount) {\n        try {\n            // EDU token on Arbitrum\n            const eduTokenAddress = '0xf8173a39c56a554837C4C7f104153A005D284D11';\n            // Get EDU token decimals and balance\n            const eduContract = new ethers_1.ethers.Contract(eduTokenAddress, [\n                'function decimals() view returns (uint8)',\n                'function balanceOf(address) view returns (uint256)'\n            ], this.provider);\n            const decimals = await eduContract.decimals();\n            const balance = await eduContract.balanceOf(address);\n            return ethers_1.ethers.getBigInt(balance) >= ethers_1.ethers.parseUnits(amount, decimals);\n        }\n        catch (error) {\n            console.error('Error checking EDU balance on Arbitrum:', error);\n            throw new Error('Failed to check EDU balance on Arbitrum');\n        }\n    }\n    /**\n     * Bridge EDU tokens from Arbitrum to EDUCHAIN\n     * @param amount Amount of EDU tokens to bridge\n     * @returns Transaction response\n     */\n    async bridgeEduFromArbToEdu(amount) {\n        this.hasSigner();\n        try {\n            // Contract address for bridging from Arbitrum to EDUCHAIN\n            const contractAddr = '0x590044e628ea1B9C10a86738Cf7a7eeF52D031B8';\n            // EDU token on Arbitrum\n            const eduTokenAddress = '0xf8173a39c56a554837C4C7f104153A005D284D11';\n            // Get EDU token decimals\n            const eduContract = new ethers_1.ethers.Contract(eduTokenAddress, ['function decimals() view returns (uint8)'], this.provider);\n            const decimals = await eduContract.decimals();\n            // Create contract instance\n            const contract = new ethers_1.ethers.Contract(contractAddr, ['function depositERC20(uint256 amount)'], this.signer);\n            // Parse amount with correct decimals\n            const amountBigInt = ethers_1.ethers.parseUnits(amount, decimals);\n            // Execute the bridge transaction\n            return contract.depositERC20(amountBigInt);\n        }\n        catch (error) {\n            console.error('Error bridging EDU tokens from Arbitrum to EDUCHAIN:', error);\n            throw new Error('Failed to bridge EDU tokens from Arbitrum to EDUCHAIN');\n        }\n    }\n}\nexports.Bridge = Bridge;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../dist/bridge.js\n");

/***/ }),

/***/ "../../dist/constants.js":
/*!*******************************!*\
  !*** ../../dist/constants.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SUBGRAPH_URL = exports.FEE_TO_TICK_SPACING = exports.FEE_TIERS = exports.UNISWAP_V3_POOL_ABI = exports.UNISWAP_V3_FACTORY_ABI = exports.QUOTER_V2_ABI = exports.ERC20_ABI = exports.ROUTER_ABI = exports.MAX_UINT256 = exports.MAX_INT128 = exports.RPC_URL = exports.CHAIN_ID = exports.ADDRESSES = exports.BSC_ABI = void 0;\n// Contract addresses\n// BSC OFT ABI for LayerZero bridging\nexports.BSC_ABI = [\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_token\", type: \"address\" },\n            { internalType: \"uint8\", name: \"_sharedDecimals\", type: \"uint8\" },\n            { internalType: \"address\", name: \"_lzEndpoint\", type: \"address\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint16\",\n                name: \"_srcChainId\",\n                type: \"uint16\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_srcAddress\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"_nonce\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"_hash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"CallOFTReceivedSuccess\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint16\",\n                name: \"_srcChainId\",\n                type: \"uint16\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_srcAddress\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"_nonce\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_payload\",\n                type: \"bytes\",\n            },\n            { indexed: false, internalType: \"bytes\", name: \"_reason\", type: \"bytes\" },\n        ],\n        name: \"MessageFailed\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"NonContractAddress\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"previousOwner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newOwner\",\n                type: \"address\",\n            },\n        ],\n        name: \"OwnershipTransferred\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint16\",\n                name: \"_srcChainId\",\n                type: \"uint16\",\n            },\n            { indexed: true, internalType: \"address\", name: \"_to\", type: \"address\" },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ReceiveFromChain\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint16\",\n                name: \"_srcChainId\",\n                type: \"uint16\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_srcAddress\",\n                type: \"bytes\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"_nonce\",\n                type: \"uint64\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"_payloadHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"RetryMessageSuccess\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint16\",\n                name: \"_dstChainId\",\n                type: \"uint16\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"_toAddress\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SendToChain\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint16\",\n                name: \"_dstChainId\",\n                type: \"uint16\",\n            },\n            { indexed: false, internalType: \"uint16\", name: \"_type\", type: \"uint16\" },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_minDstGas\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"SetMinDstGas\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"address\",\n                name: \"precrime\",\n                type: \"address\",\n            },\n        ],\n        name: \"SetPrecrime\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint16\",\n                name: \"_remoteChainId\",\n                type: \"uint16\",\n            },\n            { indexed: false, internalType: \"bytes\", name: \"_path\", type: \"bytes\" },\n        ],\n        name: \"SetTrustedRemote\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint16\",\n                name: \"_remoteChainId\",\n                type: \"uint16\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes\",\n                name: \"_remoteAddress\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"SetTrustedRemoteAddress\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"DEFAULT_PAYLOAD_SIZE_LIMIT\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"NO_EXTRA_GAS\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PT_SEND\",\n        outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PT_SEND_AND_CALL\",\n        outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_srcChainId\", type: \"uint16\" },\n            { internalType: \"bytes\", name: \"_srcAddress\", type: \"bytes\" },\n            { internalType: \"uint64\", name: \"_nonce\", type: \"uint64\" },\n            { internalType: \"bytes32\", name: \"_from\", type: \"bytes32\" },\n            { internalType: \"address\", name: \"_to\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n            { internalType: \"bytes\", name: \"_payload\", type: \"bytes\" },\n            { internalType: \"uint256\", name: \"_gasForCall\", type: \"uint256\" },\n        ],\n        name: \"callOnOFTReceived\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"circulatingSupply\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"\", type: \"uint16\" },\n            { internalType: \"bytes\", name: \"\", type: \"bytes\" },\n            { internalType: \"uint64\", name: \"\", type: \"uint64\" },\n        ],\n        name: \"creditedPackets\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_dstChainId\", type: \"uint16\" },\n            { internalType: \"bytes32\", name: \"_toAddress\", type: \"bytes32\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n            { internalType: \"bytes\", name: \"_payload\", type: \"bytes\" },\n            { internalType: \"uint64\", name: \"_dstGasForCall\", type: \"uint64\" },\n            { internalType: \"bool\", name: \"_useZro\", type: \"bool\" },\n            { internalType: \"bytes\", name: \"_adapterParams\", type: \"bytes\" },\n        ],\n        name: \"estimateSendAndCallFee\",\n        outputs: [\n            { internalType: \"uint256\", name: \"nativeFee\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"zroFee\", type: \"uint256\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_dstChainId\", type: \"uint16\" },\n            { internalType: \"bytes32\", name: \"_toAddress\", type: \"bytes32\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n            { internalType: \"bool\", name: \"_useZro\", type: \"bool\" },\n            { internalType: \"bytes\", name: \"_adapterParams\", type: \"bytes\" },\n        ],\n        name: \"estimateSendFee\",\n        outputs: [\n            { internalType: \"uint256\", name: \"nativeFee\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"zroFee\", type: \"uint256\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"\", type: \"uint16\" },\n            { internalType: \"bytes\", name: \"\", type: \"bytes\" },\n            { internalType: \"uint64\", name: \"\", type: \"uint64\" },\n        ],\n        name: \"failedMessages\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_srcChainId\", type: \"uint16\" },\n            { internalType: \"bytes\", name: \"_srcAddress\", type: \"bytes\" },\n        ],\n        name: \"forceResumeReceive\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_version\", type: \"uint16\" },\n            { internalType: \"uint16\", name: \"_chainId\", type: \"uint16\" },\n            { internalType: \"address\", name: \"\", type: \"address\" },\n            { internalType: \"uint256\", name: \"_configType\", type: \"uint256\" },\n        ],\n        name: \"getConfig\",\n        outputs: [{ internalType: \"bytes\", name: \"\", type: \"bytes\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_remoteChainId\", type: \"uint16\" },\n        ],\n        name: \"getTrustedRemoteAddress\",\n        outputs: [{ internalType: \"bytes\", name: \"\", type: \"bytes\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_srcChainId\", type: \"uint16\" },\n            { internalType: \"bytes\", name: \"_srcAddress\", type: \"bytes\" },\n        ],\n        name: \"isTrustedRemote\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"lzEndpoint\",\n        outputs: [\n            {\n                internalType: \"contract ILayerZeroEndpoint\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_srcChainId\", type: \"uint16\" },\n            { internalType: \"bytes\", name: \"_srcAddress\", type: \"bytes\" },\n            { internalType: \"uint64\", name: \"_nonce\", type: \"uint64\" },\n            { internalType: \"bytes\", name: \"_payload\", type: \"bytes\" },\n        ],\n        name: \"lzReceive\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"\", type: \"uint16\" },\n            { internalType: \"uint16\", name: \"\", type: \"uint16\" },\n        ],\n        name: \"minDstGasLookup\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_srcChainId\", type: \"uint16\" },\n            { internalType: \"bytes\", name: \"_srcAddress\", type: \"bytes\" },\n            { internalType: \"uint64\", name: \"_nonce\", type: \"uint64\" },\n            { internalType: \"bytes\", name: \"_payload\", type: \"bytes\" },\n        ],\n        name: \"nonblockingLzReceive\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"outboundAmount\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"owner\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint16\", name: \"\", type: \"uint16\" }],\n        name: \"payloadSizeLimitLookup\",\n        outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"precrime\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"renounceOwnership\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_srcChainId\", type: \"uint16\" },\n            { internalType: \"bytes\", name: \"_srcAddress\", type: \"bytes\" },\n            { internalType: \"uint64\", name: \"_nonce\", type: \"uint64\" },\n            { internalType: \"bytes\", name: \"_payload\", type: \"bytes\" },\n        ],\n        name: \"retryMessage\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_from\", type: \"address\" },\n            { internalType: \"uint16\", name: \"_dstChainId\", type: \"uint16\" },\n            { internalType: \"bytes32\", name: \"_toAddress\", type: \"bytes32\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n            { internalType: \"bytes\", name: \"_payload\", type: \"bytes\" },\n            { internalType: \"uint64\", name: \"_dstGasForCall\", type: \"uint64\" },\n            {\n                components: [\n                    {\n                        internalType: \"address payable\",\n                        name: \"refundAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"zroPaymentAddress\",\n                        type: \"address\",\n                    },\n                    { internalType: \"bytes\", name: \"adapterParams\", type: \"bytes\" },\n                ],\n                internalType: \"struct ICommonOFT.LzCallParams\",\n                name: \"_callParams\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"sendAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"_from\", type: \"address\" },\n            { internalType: \"uint16\", name: \"_dstChainId\", type: \"uint16\" },\n            { internalType: \"bytes32\", name: \"_toAddress\", type: \"bytes32\" },\n            { internalType: \"uint256\", name: \"_amount\", type: \"uint256\" },\n            {\n                components: [\n                    {\n                        internalType: \"address payable\",\n                        name: \"refundAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"zroPaymentAddress\",\n                        type: \"address\",\n                    },\n                    { internalType: \"bytes\", name: \"adapterParams\", type: \"bytes\" },\n                ],\n                internalType: \"struct ICommonOFT.LzCallParams\",\n                name: \"_callParams\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"sendFrom\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_version\", type: \"uint16\" },\n            { internalType: \"uint16\", name: \"_chainId\", type: \"uint16\" },\n            { internalType: \"uint256\", name: \"_configType\", type: \"uint256\" },\n            { internalType: \"bytes\", name: \"_config\", type: \"bytes\" },\n        ],\n        name: \"setConfig\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_dstChainId\", type: \"uint16\" },\n            { internalType: \"uint16\", name: \"_packetType\", type: \"uint16\" },\n            { internalType: \"uint256\", name: \"_minGas\", type: \"uint256\" },\n        ],\n        name: \"setMinDstGas\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_dstChainId\", type: \"uint16\" },\n            { internalType: \"uint256\", name: \"_size\", type: \"uint256\" },\n        ],\n        name: \"setPayloadSizeLimit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"_precrime\", type: \"address\" }],\n        name: \"setPrecrime\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint16\", name: \"_version\", type: \"uint16\" }],\n        name: \"setReceiveVersion\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint16\", name: \"_version\", type: \"uint16\" }],\n        name: \"setSendVersion\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_remoteChainId\", type: \"uint16\" },\n            { internalType: \"bytes\", name: \"_path\", type: \"bytes\" },\n        ],\n        name: \"setTrustedRemote\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint16\", name: \"_remoteChainId\", type: \"uint16\" },\n            { internalType: \"bytes\", name: \"_remoteAddress\", type: \"bytes\" },\n        ],\n        name: \"setTrustedRemoteAddress\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"sharedDecimals\",\n        outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"bytes4\", name: \"interfaceId\", type: \"bytes4\" }],\n        name: \"supportsInterface\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"token\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"newOwner\", type: \"address\" }],\n        name: \"transferOwnership\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [{ internalType: \"uint16\", name: \"\", type: \"uint16\" }],\n        name: \"trustedRemoteLookup\",\n        outputs: [{ internalType: \"bytes\", name: \"\", type: \"bytes\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nexports.ADDRESSES = {\n    WEDU: '0xd02E8c38a8E3db71f8b2ae30B8186d7874934e12',\n    UNIVERSAL_ROUTER: '0x2f336145125f48d053EE0272EB02288cd40b808e',\n    PERSONAL_ASSET_MANAGER_FACTORY: '0x08210F57aa7F2219ddE1B267BB101C7a11a2Ed83',\n    ASSET_HELPER: '0x8D541EC50b550CB1Fe14Cf72Eebf2bA40c0414D4',\n    UNISWAP_V3_FACTORY: '0x963A7f4eB46967A9fd3dFbabD354fC294FA2BF5C',\n    NONFUNGIBLE_POSITION_MANAGER: '0x79cc7deA5eE05735a7503A32Dc4251C7f79F3Baf',\n    SWAP_ROUTER: '0x1a1e967e523435CeF20642e3D7811F7d0da9a704',\n    QUOTER: '0x14b4D9238550dc75Cf164FDa471Aa1d8A6A2b0c6',\n    QUOTER_V2: '0x83EE12582E3448Ab69E664A2ba69b6AedE112205',\n    TICK_LENS: '0xE5D80F26C7dfE594d22e813761104e6c217794Cf',\n};\n// Chain information\nexports.CHAIN_ID = 41923;\nexports.RPC_URL = 'https://rpc.edu-chain.raas.gelato.cloud';\n// Constants\nexports.MAX_INT128 = 2n ** 128n - 1n;\nexports.MAX_UINT256 = 2n ** 256n - 1n;\n// ABIs\nexports.ROUTER_ABI = [\n    {\n        type: \"constructor\",\n        inputs: [\n            { name: \"_factory\", type: \"address\", internalType: \"address\" },\n            { name: \"_WETH9\", type: \"address\", internalType: \"address\" },\n            { name: \"initCodeHash\", type: \"bytes32\", internalType: \"bytes32\" },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    { type: \"receive\", stateMutability: \"payable\" },\n    {\n        type: \"function\",\n        name: \"WETH9\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"exactInput\",\n        inputs: [\n            {\n                name: \"params\",\n                type: \"tuple\",\n                internalType: \"struct ISwapRouter.ExactInputParams\",\n                components: [\n                    { name: \"path\", type: \"bytes\", internalType: \"bytes\" },\n                    {\n                        name: \"recipient\",\n                        type: \"address\",\n                        internalType: \"address\",\n                    },\n                    {\n                        name: \"deadline\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                    {\n                        name: \"amountIn\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                    {\n                        name: \"amountOutMinimum\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                ],\n            },\n        ],\n        outputs: [{ name: \"amountOut\", type: \"uint256\", internalType: \"uint256\" }],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"exactInputSingle\",\n        inputs: [\n            {\n                name: \"params\",\n                type: \"tuple\",\n                internalType: \"struct ISwapRouter.ExactInputSingleParams\",\n                components: [\n                    { name: \"tokenIn\", type: \"address\", internalType: \"address\" },\n                    {\n                        name: \"tokenOut\",\n                        type: \"address\",\n                        internalType: \"address\",\n                    },\n                    { name: \"fee\", type: \"uint24\", internalType: \"uint24\" },\n                    {\n                        name: \"recipient\",\n                        type: \"address\",\n                        internalType: \"address\",\n                    },\n                    {\n                        name: \"deadline\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                    {\n                        name: \"amountIn\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                    {\n                        name: \"amountOutMinimum\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                    {\n                        name: \"sqrtPriceLimitX96\",\n                        type: \"uint160\",\n                        internalType: \"uint160\",\n                    },\n                ],\n            },\n        ],\n        outputs: [{ name: \"amountOut\", type: \"uint256\", internalType: \"uint256\" }],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"exactOutput\",\n        inputs: [\n            {\n                name: \"params\",\n                type: \"tuple\",\n                internalType: \"struct ISwapRouter.ExactOutputParams\",\n                components: [\n                    { name: \"path\", type: \"bytes\", internalType: \"bytes\" },\n                    {\n                        name: \"recipient\",\n                        type: \"address\",\n                        internalType: \"address\",\n                    },\n                    {\n                        name: \"deadline\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                    {\n                        name: \"amountOut\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                    {\n                        name: \"amountInMaximum\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                ],\n            },\n        ],\n        outputs: [{ name: \"amountIn\", type: \"uint256\", internalType: \"uint256\" }],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"exactOutputSingle\",\n        inputs: [\n            {\n                name: \"params\",\n                type: \"tuple\",\n                internalType: \"struct ISwapRouter.ExactOutputSingleParams\",\n                components: [\n                    { name: \"tokenIn\", type: \"address\", internalType: \"address\" },\n                    {\n                        name: \"tokenOut\",\n                        type: \"address\",\n                        internalType: \"address\",\n                    },\n                    { name: \"fee\", type: \"uint24\", internalType: \"uint24\" },\n                    {\n                        name: \"recipient\",\n                        type: \"address\",\n                        internalType: \"address\",\n                    },\n                    {\n                        name: \"deadline\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                    {\n                        name: \"amountOut\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                    {\n                        name: \"amountInMaximum\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                    {\n                        name: \"sqrtPriceLimitX96\",\n                        type: \"uint160\",\n                        internalType: \"uint160\",\n                    },\n                ],\n            },\n        ],\n        outputs: [{ name: \"amountIn\", type: \"uint256\", internalType: \"uint256\" }],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"factory\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"multicall\",\n        inputs: [{ name: \"data\", type: \"bytes[]\", internalType: \"bytes[]\" }],\n        outputs: [{ name: \"results\", type: \"bytes[]\", internalType: \"bytes[]\" }],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"refundETH\",\n        inputs: [],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"selfPermit\",\n        inputs: [\n            { name: \"token\", type: \"address\", internalType: \"address\" },\n            { name: \"value\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"deadline\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"v\", type: \"uint8\", internalType: \"uint8\" },\n            { name: \"r\", type: \"bytes32\", internalType: \"bytes32\" },\n            { name: \"s\", type: \"bytes32\", internalType: \"bytes32\" },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"selfPermitAllowed\",\n        inputs: [\n            { name: \"token\", type: \"address\", internalType: \"address\" },\n            { name: \"nonce\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"expiry\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"v\", type: \"uint8\", internalType: \"uint8\" },\n            { name: \"r\", type: \"bytes32\", internalType: \"bytes32\" },\n            { name: \"s\", type: \"bytes32\", internalType: \"bytes32\" },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"selfPermitAllowedIfNecessary\",\n        inputs: [\n            { name: \"token\", type: \"address\", internalType: \"address\" },\n            { name: \"nonce\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"expiry\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"v\", type: \"uint8\", internalType: \"uint8\" },\n            { name: \"r\", type: \"bytes32\", internalType: \"bytes32\" },\n            { name: \"s\", type: \"bytes32\", internalType: \"bytes32\" },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"selfPermitIfNecessary\",\n        inputs: [\n            { name: \"token\", type: \"address\", internalType: \"address\" },\n            { name: \"value\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"deadline\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"v\", type: \"uint8\", internalType: \"uint8\" },\n            { name: \"r\", type: \"bytes32\", internalType: \"bytes32\" },\n            { name: \"s\", type: \"bytes32\", internalType: \"bytes32\" },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"sweepToken\",\n        inputs: [\n            { name: \"token\", type: \"address\", internalType: \"address\" },\n            {\n                name: \"amountMinimum\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            { name: \"recipient\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"sweepTokenWithFee\",\n        inputs: [\n            { name: \"token\", type: \"address\", internalType: \"address\" },\n            {\n                name: \"amountMinimum\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            { name: \"recipient\", type: \"address\", internalType: \"address\" },\n            { name: \"feeBips\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"feeRecipient\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"uniswapV3SwapCallback\",\n        inputs: [\n            { name: \"amount0Delta\", type: \"int256\", internalType: \"int256\" },\n            { name: \"amount1Delta\", type: \"int256\", internalType: \"int256\" },\n            { name: \"_data\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"unwrapWETH9\",\n        inputs: [\n            {\n                name: \"amountMinimum\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            { name: \"recipient\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        name: \"unwrapWETH9WithFee\",\n        inputs: [\n            {\n                name: \"amountMinimum\",\n                type: \"uint256\",\n                internalType: \"uint256\",\n            },\n            { name: \"recipient\", type: \"address\", internalType: \"address\" },\n            { name: \"feeBips\", type: \"uint256\", internalType: \"uint256\" },\n            { name: \"feeRecipient\", type: \"address\", internalType: \"address\" },\n        ],\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n];\nexports.ERC20_ABI = [\n    \"function balanceOf(address owner) external view returns (uint256)\",\n    \"function approve(address spender, uint256 amount) external returns (bool)\",\n    \"function transfer(address to, uint256 amount) external returns (bool)\",\n    \"function allowance(address,address) view returns (uint256)\",\n    \"function decimals() view returns (uint8)\",\n    \"function symbol() view returns (string)\",\n    \"function deposit() public payable\",\n];\nexports.QUOTER_V2_ABI = [\n    {\n        type: \"constructor\",\n        inputs: [\n            { name: \"_factory\", type: \"address\", internalType: \"address\" },\n            { name: \"_WETH9\", type: \"address\", internalType: \"address\" },\n            { name: \"initCodeHash\", type: \"bytes32\", internalType: \"bytes32\" },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"WETH9\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"factory\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        name: \"quoteExactInput\",\n        inputs: [\n            { name: \"path\", type: \"bytes\", internalType: \"bytes\" },\n            { name: \"amountIn\", type: \"uint256\", internalType: \"uint256\" },\n        ],\n        outputs: [\n            { name: \"amountOut\", type: \"uint256\", internalType: \"uint256\" },\n            {\n                name: \"sqrtPriceX96AfterList\",\n                type: \"uint160[]\",\n                internalType: \"uint160[]\",\n            },\n            {\n                name: \"initializedTicksCrossedList\",\n                type: \"uint32[]\",\n                internalType: \"uint32[]\",\n            },\n            { name: \"gasEstimate\", type: \"uint256\", internalType: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"quoteExactInputSingle\",\n        inputs: [\n            {\n                name: \"params\",\n                type: \"tuple\",\n                internalType: \"struct IQuoterV2.QuoteExactInputSingleParams\",\n                components: [\n                    { name: \"tokenIn\", type: \"address\", internalType: \"address\" },\n                    {\n                        name: \"tokenOut\",\n                        type: \"address\",\n                        internalType: \"address\",\n                    },\n                    {\n                        name: \"amountIn\",\n                        type: \"uint256\",\n                        internalType: \"uint256\",\n                    },\n                    { name: \"fee\", type: \"uint24\", internalType: \"uint24\" },\n                    {\n                        name: \"sqrtPriceLimitX96\",\n                        type: \"uint160\",\n                        internalType: \"uint160\",\n                    },\n                ],\n            },\n        ],\n        outputs: [\n            { name: \"amountOut\", type: \"uint256\", internalType: \"uint256\" },\n            {\n                name: \"sqrtPriceX96After\",\n                type: \"uint160\",\n                internalType: \"uint160\",\n            },\n            {\n                name: \"initializedTicksCrossed\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            { name: \"gasEstimate\", type: \"uint256\", internalType: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"quoteExactOutput\",\n        inputs: [\n            { name: \"path\", type: \"bytes\", internalType: \"bytes\" },\n            { name: \"amountOut\", type: \"uint256\", internalType: \"uint256\" },\n        ],\n        outputs: [\n            { name: \"amountIn\", type: \"uint256\", internalType: \"uint256\" },\n            {\n                name: \"sqrtPriceX96AfterList\",\n                type: \"uint160[]\",\n                internalType: \"uint160[]\",\n            },\n            {\n                name: \"initializedTicksCrossedList\",\n                type: \"uint32[]\",\n                internalType: \"uint32[]\",\n            },\n            { name: \"gasEstimate\", type: \"uint256\", internalType: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"quoteExactOutputSingle\",\n        inputs: [\n            {\n                name: \"params\",\n                type: \"tuple\",\n                internalType: \"struct IQuoterV2.QuoteExactOutputSingleParams\",\n                components: [\n                    { name: \"tokenIn\", type: \"address\", internalType: \"address\" },\n                    {\n                        name: \"tokenOut\",\n                        type: \"address\",\n                        internalType: \"address\",\n                    },\n                    { name: \"amount\", type: \"uint256\", internalType: \"uint256\" },\n                    { name: \"fee\", type: \"uint24\", internalType: \"uint24\" },\n                    {\n                        name: \"sqrtPriceLimitX96\",\n                        type: \"uint160\",\n                        internalType: \"uint160\",\n                    },\n                ],\n            },\n        ],\n        outputs: [\n            { name: \"amountIn\", type: \"uint256\", internalType: \"uint256\" },\n            {\n                name: \"sqrtPriceX96After\",\n                type: \"uint160\",\n                internalType: \"uint160\",\n            },\n            {\n                name: \"initializedTicksCrossed\",\n                type: \"uint32\",\n                internalType: \"uint32\",\n            },\n            { name: \"gasEstimate\", type: \"uint256\", internalType: \"uint256\" },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        name: \"uniswapV3SwapCallback\",\n        inputs: [\n            { name: \"amount0Delta\", type: \"int256\", internalType: \"int256\" },\n            { name: \"amount1Delta\", type: \"int256\", internalType: \"int256\" },\n            { name: \"path\", type: \"bytes\", internalType: \"bytes\" },\n        ],\n        outputs: [],\n        stateMutability: \"view\",\n    },\n];\nexports.UNISWAP_V3_FACTORY_ABI = [\n    {\n        type: \"function\",\n        name: \"getPool\",\n        inputs: [\n            { name: \"tokenA\", type: \"address\", internalType: \"address\" },\n            { name: \"tokenB\", type: \"address\", internalType: \"address\" },\n            { name: \"fee\", type: \"uint24\", internalType: \"uint24\" }\n        ],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"view\"\n    }\n];\nexports.UNISWAP_V3_POOL_ABI = [\n    {\n        type: \"function\",\n        name: \"slot0\",\n        inputs: [],\n        outputs: [\n            { name: \"sqrtPriceX96\", type: \"uint160\", internalType: \"uint160\" },\n            { name: \"tick\", type: \"int24\", internalType: \"int24\" },\n            { name: \"observationIndex\", type: \"uint16\", internalType: \"uint16\" },\n            { name: \"observationCardinality\", type: \"uint16\", internalType: \"uint16\" },\n            { name: \"observationCardinalityNext\", type: \"uint16\", internalType: \"uint16\" },\n            { name: \"feeProtocol\", type: \"uint8\", internalType: \"uint8\" },\n            { name: \"unlocked\", type: \"bool\", internalType: \"bool\" }\n        ],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"function\",\n        name: \"token0\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"function\",\n        name: \"token1\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"function\",\n        name: \"fee\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"uint24\", internalType: \"uint24\" }],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"function\",\n        name: \"liquidity\",\n        inputs: [],\n        outputs: [{ name: \"\", type: \"uint128\", internalType: \"uint128\" }],\n        stateMutability: \"view\"\n    }\n];\n// Fee tiers\nexports.FEE_TIERS = {\n    LOWEST: 100, // 0.01%\n    LOW: 500, // 0.05%\n    MEDIUM: 3000, // 0.3%\n    HIGH: 10000 // 1%\n};\n// Fee tier to tick spacing mapping\nexports.FEE_TO_TICK_SPACING = {\n    [exports.FEE_TIERS.LOWEST]: 1,\n    [exports.FEE_TIERS.LOW]: 10,\n    [exports.FEE_TIERS.MEDIUM]: 60,\n    [exports.FEE_TIERS.HIGH]: 200\n};\n// Subgraph endpoint\nexports.SUBGRAPH_URL = 'https://api.goldsky.com/api/public/project_cm5nst0b7iiqy01t6hxww7gao/subgraphs/sailfish-v3-occ-mainnet/1.0.0/gn';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../dist/constants.js\n");

/***/ }),

/***/ "../../dist/index.js":
/*!***************************!*\
  !*** ../../dist/index.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SdkTrade = exports.SwapQuoter = exports.SdkRoute = exports.SdkPool = exports.CurrencyAmount = exports.SdkToken = exports.Percent = exports.TradeType = void 0;\n// SailFish DEX v3 SDK\n__exportStar(__webpack_require__(/*! ./constants */ \"../../dist/constants.js\"), exports);\n__exportStar(__webpack_require__(/*! ./quoter */ \"../../dist/quoter.js\"), exports);\n__exportStar(__webpack_require__(/*! ./router */ \"../../dist/router.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bridge */ \"../../dist/bridge.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"../../dist/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ui/BridgeWidget */ \"../../dist/ui/BridgeWidget.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils */ \"../../dist/utils.js\"), exports);\n// Re-export commonly used types from dependencies\nvar sdk_core_1 = __webpack_require__(/*! @uniswap/sdk-core */ \"@uniswap/sdk-core\");\nObject.defineProperty(exports, \"TradeType\", ({ enumerable: true, get: function () { return sdk_core_1.TradeType; } }));\nObject.defineProperty(exports, \"Percent\", ({ enumerable: true, get: function () { return sdk_core_1.Percent; } }));\nObject.defineProperty(exports, \"SdkToken\", ({ enumerable: true, get: function () { return sdk_core_1.Token; } }));\nObject.defineProperty(exports, \"CurrencyAmount\", ({ enumerable: true, get: function () { return sdk_core_1.CurrencyAmount; } }));\nvar v3_sdk_1 = __webpack_require__(/*! @uniswap/v3-sdk */ \"@uniswap/v3-sdk\");\nObject.defineProperty(exports, \"SdkPool\", ({ enumerable: true, get: function () { return v3_sdk_1.Pool; } }));\nObject.defineProperty(exports, \"SdkRoute\", ({ enumerable: true, get: function () { return v3_sdk_1.Route; } }));\nObject.defineProperty(exports, \"SwapQuoter\", ({ enumerable: true, get: function () { return v3_sdk_1.SwapQuoter; } }));\nObject.defineProperty(exports, \"SdkTrade\", ({ enumerable: true, get: function () { return v3_sdk_1.Trade; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRyxrQkFBa0IsR0FBRyxnQkFBZ0IsR0FBRyxlQUFlLEdBQUcsc0JBQXNCLEdBQUcsZ0JBQWdCLEdBQUcsZUFBZSxHQUFHLGlCQUFpQjtBQUM1SjtBQUNBLGFBQWEsbUJBQU8sQ0FBQyw0Q0FBYTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsc0NBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLHNDQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxzQ0FBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsb0NBQVM7QUFDOUIsYUFBYSxtQkFBTyxDQUFDLHdEQUFtQjtBQUN4QyxhQUFhLG1CQUFPLENBQUMsb0NBQVM7QUFDOUI7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyw0Q0FBbUI7QUFDNUMsNkNBQTRDLEVBQUUscUNBQXFDLGdDQUFnQyxFQUFDO0FBQ3BILDJDQUEwQyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBQztBQUNoSCw0Q0FBMkMsRUFBRSxxQ0FBcUMsNEJBQTRCLEVBQUM7QUFDL0csa0RBQWlELEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQzlILGVBQWUsbUJBQU8sQ0FBQyx3Q0FBaUI7QUFDeEMsMkNBQTBDLEVBQUUscUNBQXFDLHlCQUF5QixFQUFDO0FBQzNHLDRDQUEyQyxFQUFFLHFDQUFxQywwQkFBMEIsRUFBQztBQUM3Ryw4Q0FBNkMsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDcEgsNENBQTJDLEVBQUUscUNBQXFDLDBCQUEwQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWJyaWRnZS1leGFtcGxlLy4uLy4uL2Rpc3QvaW5kZXguanM/YWFiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZGtUcmFkZSA9IGV4cG9ydHMuU3dhcFF1b3RlciA9IGV4cG9ydHMuU2RrUm91dGUgPSBleHBvcnRzLlNka1Bvb2wgPSBleHBvcnRzLkN1cnJlbmN5QW1vdW50ID0gZXhwb3J0cy5TZGtUb2tlbiA9IGV4cG9ydHMuUGVyY2VudCA9IGV4cG9ydHMuVHJhZGVUeXBlID0gdm9pZCAwO1xuLy8gU2FpbEZpc2ggREVYIHYzIFNES1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcXVvdGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9yb3V0ZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2JyaWRnZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3VpL0JyaWRnZVdpZGdldFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHNcIiksIGV4cG9ydHMpO1xuLy8gUmUtZXhwb3J0IGNvbW1vbmx5IHVzZWQgdHlwZXMgZnJvbSBkZXBlbmRlbmNpZXNcbnZhciBzZGtfY29yZV8xID0gcmVxdWlyZShcIkB1bmlzd2FwL3Nkay1jb3JlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHJhZGVUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZGtfY29yZV8xLlRyYWRlVHlwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBlcmNlbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNka19jb3JlXzEuUGVyY2VudDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNka1Rva2VuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZGtfY29yZV8xLlRva2VuOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ3VycmVuY3lBbW91bnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNka19jb3JlXzEuQ3VycmVuY3lBbW91bnQ7IH0gfSk7XG52YXIgdjNfc2RrXzEgPSByZXF1aXJlKFwiQHVuaXN3YXAvdjMtc2RrXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2RrUG9vbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjNfc2RrXzEuUG9vbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNka1JvdXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2M19zZGtfMS5Sb3V0ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN3YXBRdW90ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHYzX3Nka18xLlN3YXBRdW90ZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZGtUcmFkZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjNfc2RrXzEuVHJhZGU7IH0gfSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../dist/index.js\n");

/***/ }),

/***/ "../../dist/quoter.js":
/*!****************************!*\
  !*** ../../dist/quoter.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Quoter = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"../../node_modules/ethers/lib.commonjs/index.js\");\nconst graphql_request_1 = __webpack_require__(/*! graphql-request */ \"graphql-request\");\nconst sdk_core_1 = __webpack_require__(/*! @uniswap/sdk-core */ \"@uniswap/sdk-core\");\nconst v3_sdk_1 = __webpack_require__(/*! @uniswap/v3-sdk */ \"@uniswap/v3-sdk\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"../../dist/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"../../dist/utils.js\");\n/**\n * SailFish Quoter class for getting quotes and finding routes\n */\nclass Quoter {\n    /**\n     * Create a new Quoter instance\n     * @param provider An ethers Provider\n     */\n    constructor(provider) {\n        this.provider = provider;\n        this.quoterContract = new ethers_1.ethers.Contract(constants_1.ADDRESSES.QUOTER_V2, constants_1.QUOTER_V2_ABI, this.provider);\n    }\n    /**\n     * Get the best route for a swap\n     * @param tokenInAddress Input token address\n     * @param tokenOutAddress Output token address\n     * @returns Promise resolving to the best route\n     */\n    async getBestRoute(tokenInAddress, tokenOutAddress) {\n        const routes = await this.findAllRoutes(tokenInAddress, tokenOutAddress);\n        return routes;\n    }\n    /**\n     * Find all possible routes for a swap\n     * @param tokenInAddress Input token address\n     * @param tokenOutAddress Output token address\n     * @returns Promise resolving to all possible routes\n     */\n    async findAllRoutes(tokenInAddress, tokenOutAddress) {\n        try {\n            // First, try to find direct routes\n            const directPools = await this.queryDirectPools(tokenInAddress.toLowerCase(), tokenOutAddress.toLowerCase());\n            // If direct routes exist, return them\n            if (directPools.pools.length > 0) {\n                return {\n                    type: 'direct',\n                    routes: directPools.pools\n                        .map((pool) => ({\n                        type: 'direct',\n                        path: [\n                            {\n                                id: pool.id,\n                                token0: {\n                                    address: pool.token0.id,\n                                    symbol: pool.token0.symbol,\n                                    decimals: Number(pool.token0.decimals),\n                                    name: pool.token0.name,\n                                },\n                                token1: {\n                                    address: pool.token1.id,\n                                    symbol: pool.token1.symbol,\n                                    decimals: Number(pool.token1.decimals),\n                                    name: pool.token1.name,\n                                },\n                                feeTier: Number(pool.feeTier),\n                                liquidity: pool.liquidity,\n                                token0Price: pool.token0Price,\n                                token1Price: pool.token1Price,\n                            },\n                        ],\n                        totalFee: Number(pool.feeTier),\n                    }))\n                        .sort((a, b) => Number(b.path[0].liquidity) - Number(a.path[0].liquidity)),\n                };\n            }\n            // If no direct routes, look for indirect routes\n            const indirectPools = await this.queryIndirectPools(tokenInAddress.toLowerCase(), tokenOutAddress.toLowerCase());\n            // Find common tokens between pools containing tokenIn and tokenOut\n            const intermediaryTokens = this.findIntermediaryTokens(indirectPools.pools0, indirectPools.pools1);\n            // Construct indirect routes\n            const routes = this.constructIndirectRoutes(indirectPools.pools0, indirectPools.pools1, intermediaryTokens);\n            return {\n                type: 'indirect',\n                routes: routes,\n            };\n        }\n        catch (error) {\n            console.error('Error finding routes:', error);\n            throw error;\n        }\n    }\n    /**\n     * Query direct pools for a token pair\n     * @param token0 First token address\n     * @param token1 Second token address\n     * @returns Promise resolving to direct pools\n     */\n    async queryDirectPools(token0, token1) {\n        const query = (0, graphql_request_1.gql) `\n      query findDirectPools($token0: String!, $token1: String!) {\n        pools(\n          where: {\n            and: [\n              { token0_in: [$token0, $token1] }\n              { token1_in: [$token0, $token1] }\n              { liquidity_gt: 0 }\n            ]\n          }\n        ) {\n          id\n          token0 {\n            id\n            symbol\n            decimals\n            name\n          }\n          token1 {\n            id\n            symbol\n            decimals\n            name\n          }\n          feeTier\n          liquidity\n          token0Price\n          token1Price\n        }\n      }\n    `;\n        return (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL, query, {\n            token0,\n            token1,\n        });\n    }\n    /**\n     * Query indirect pools for a token pair\n     * @param tokenIn Input token address\n     * @param tokenOut Output token address\n     * @returns Promise resolving to indirect pools\n     */\n    async queryIndirectPools(tokenIn, tokenOut) {\n        const query = (0, graphql_request_1.gql) `\n      query findIndirectPools($tokenIn: String!, $tokenOut: String!) {\n        # First, find pools containing tokenIn\n        pools0: pools(\n          where: {\n            or: [\n              {\n                token0: $tokenIn\n                liquidity_gt: 0\n              }\n              {\n                token1: $tokenIn\n                liquidity_gt: 0\n              }\n            ]\n          }\n        ) {\n          id\n          token0 {\n            id\n            symbol\n            decimals\n            name\n          }\n          token1 {\n            id\n            symbol\n            decimals\n            name\n          }\n          feeTier\n          liquidity\n        }\n        # Then, find pools containing tokenOut\n        pools1: pools(\n          where: {\n            or: [\n              {\n                token0: $tokenOut\n                liquidity_gt: 0\n              }\n              {\n                token1: $tokenOut\n                liquidity_gt: 0\n              }\n            ]\n          }\n        ) {\n          id\n          token0 {\n            id\n            symbol\n            decimals\n            name\n          }\n          token1 {\n            id\n            symbol\n            decimals\n            name\n          }\n          feeTier\n          liquidity\n        }\n      }\n    `;\n        return (0, graphql_request_1.request)(constants_1.SUBGRAPH_URL, query, {\n            tokenIn,\n            tokenOut,\n        });\n    }\n    /**\n     * Find intermediary tokens between two sets of pools\n     * @param pools0 First set of pools\n     * @param pools1 Second set of pools\n     * @returns Array of intermediary tokens\n     */\n    findIntermediaryTokens(pools0, pools1) {\n        const tokens0 = new Set();\n        const tokens1 = new Set();\n        // Collect all tokens from first hop pools\n        pools0.forEach((pool) => {\n            tokens0.add(pool.token0.id);\n            tokens0.add(pool.token1.id);\n        });\n        // Collect all tokens from second hop pools\n        pools1.forEach((pool) => {\n            tokens1.add(pool.token0.id);\n            tokens1.add(pool.token1.id);\n        });\n        // Find intersection of tokens (potential intermediary tokens)\n        return Array.from(tokens0).filter((token) => tokens1.has(token));\n    }\n    /**\n     * Construct indirect routes from pools and intermediary tokens\n     * @param pools0 First set of pools\n     * @param pools1 Second set of pools\n     * @param intermediaryTokens Array of intermediary tokens\n     * @returns Array of indirect routes\n     */\n    constructIndirectRoutes(pools0, pools1, intermediaryTokens) {\n        const routes = [];\n        intermediaryTokens.forEach((intermediaryToken) => {\n            const firstHopPools = pools0.filter((pool) => pool.token0.id === intermediaryToken ||\n                pool.token1.id === intermediaryToken);\n            const secondHopPools = pools1.filter((pool) => pool.token0.id === intermediaryToken ||\n                pool.token1.id === intermediaryToken);\n            firstHopPools.forEach((firstPool) => {\n                secondHopPools.forEach((secondPool) => {\n                    const intermediaryTokenDetails = {\n                        address: intermediaryToken,\n                        symbol: firstPool.token0.id === intermediaryToken\n                            ? firstPool.token0.symbol\n                            : firstPool.token1.symbol,\n                        decimals: firstPool.token0.id === intermediaryToken\n                            ? Number(firstPool.token0.decimals)\n                            : Number(firstPool.token1.decimals),\n                        name: firstPool.token0.id === intermediaryToken\n                            ? firstPool.token0.name\n                            : firstPool.token1.name,\n                    };\n                    routes.push({\n                        type: 'indirect',\n                        path: [\n                            {\n                                id: firstPool.id,\n                                token0: {\n                                    address: firstPool.token0.id,\n                                    symbol: firstPool.token0.symbol,\n                                    decimals: Number(firstPool.token0.decimals),\n                                    name: firstPool.token0.name,\n                                },\n                                token1: {\n                                    address: firstPool.token1.id,\n                                    symbol: firstPool.token1.symbol,\n                                    decimals: Number(firstPool.token1.decimals),\n                                    name: firstPool.token1.name,\n                                },\n                                feeTier: Number(firstPool.feeTier),\n                                liquidity: firstPool.liquidity,\n                            },\n                            {\n                                id: secondPool.id,\n                                token0: {\n                                    address: secondPool.token0.id,\n                                    symbol: secondPool.token0.symbol,\n                                    decimals: Number(secondPool.token0.decimals),\n                                    name: secondPool.token0.name,\n                                },\n                                token1: {\n                                    address: secondPool.token1.id,\n                                    symbol: secondPool.token1.symbol,\n                                    decimals: Number(secondPool.token1.decimals),\n                                    name: secondPool.token1.name,\n                                },\n                                feeTier: Number(secondPool.feeTier),\n                                liquidity: secondPool.liquidity,\n                            },\n                        ],\n                        intermediaryToken: intermediaryTokenDetails,\n                        totalFee: (Number(firstPool.feeTier) + Number(secondPool.feeTier)) / 1000000,\n                    });\n                });\n            });\n        });\n        return routes.sort((a, b) => Number(b.path[0].liquidity) +\n            Number(b.path[1].liquidity) -\n            (Number(a.path[0].liquidity) + Number(a.path[1].liquidity)));\n    }\n    /**\n     * Get a quote for an exact input swap\n     * @param params Quote parameters\n     * @returns Promise resolving to the quote result\n     */\n    async quoteExactInputSingle(params) {\n        return this.quoterContract.quoteExactInputSingle.staticCall(params);\n    }\n    /**\n     * Get a quote for an exact output swap\n     * @param params Quote parameters\n     * @returns Promise resolving to the quote result\n     */\n    async quoteExactOutputSingle(params) {\n        return this.quoterContract.quoteExactOutputSingle.staticCall(params);\n    }\n    /**\n     * Get a quote for a swap\n     * @param tokenIn Input token address\n     * @param tokenOut Output token address\n     * @param amountIn Amount of input token (for exact input swaps)\n     * @param amountOut Amount of output token (for exact output swaps)\n     * @param tradeType Trade type (exact input or exact output)\n     * @returns Promise resolving to the quote result\n     */\n    async getQuote(tokenIn, tokenOut, amountIn, amountOut, tradeType) {\n        // Get the best route\n        const routeResult = await this.getBestRoute(tokenIn, tokenOut);\n        if (!routeResult.routes.length) {\n            throw new Error('No route found');\n        }\n        // Get token info\n        const tokenInInfo = await (0, utils_1.getTokenInfo)(tokenIn, this.provider);\n        const tokenOutInfo = await (0, utils_1.getTokenInfo)(tokenOut, this.provider);\n        // Create SDK tokens\n        const sdkTokenIn = new sdk_core_1.Token(constants_1.CHAIN_ID, tokenIn, tokenInInfo.decimals, tokenInInfo.symbol, tokenInInfo.name);\n        const sdkTokenOut = new sdk_core_1.Token(constants_1.CHAIN_ID, tokenOut, tokenOutInfo.decimals, tokenOutInfo.symbol, tokenOutInfo.name);\n        // Get the best route\n        const bestRoute = routeResult.routes[0];\n        // Handle direct and indirect routes differently\n        if (bestRoute.type === 'direct') {\n            const poolAddress = bestRoute.path[0].id;\n            const poolInfo = await (0, utils_1.getPoolInfo)(poolAddress, this.provider);\n            const fee = poolInfo.fee;\n            // Create quote parameters and get quote from contract\n            let quoteResult;\n            if (tradeType === sdk_core_1.TradeType.EXACT_INPUT) {\n                const params = {\n                    tokenIn,\n                    tokenOut,\n                    amountIn: ethers_1.ethers.parseUnits(amountIn, tokenInInfo.decimals),\n                    fee,\n                    sqrtPriceLimitX96: 0\n                };\n                quoteResult = await this.quoteExactInputSingle(params);\n            }\n            else {\n                const params = {\n                    tokenIn,\n                    tokenOut,\n                    amount: ethers_1.ethers.parseUnits(amountOut, tokenOutInfo.decimals),\n                    fee,\n                    sqrtPriceLimitX96: 0\n                };\n                quoteResult = await this.quoteExactOutputSingle(params);\n            }\n            // Create SDK pools\n            const pool = new v3_sdk_1.Pool(sdkTokenIn, sdkTokenOut, poolInfo.fee, poolInfo.sqrtPriceX96.toString(), poolInfo.liquidity.toString(), poolInfo.tick);\n            // Create a route\n            const route = new v3_sdk_1.Route([pool], sdkTokenIn, sdkTokenOut);\n            // Create a trade\n            let trade;\n            if (tradeType === sdk_core_1.TradeType.EXACT_INPUT) {\n                const amountInWei = ethers_1.ethers.parseUnits(amountIn, tokenInInfo.decimals);\n                const currencyAmountIn = sdk_core_1.CurrencyAmount.fromRawAmount(sdkTokenIn, amountInWei.toString());\n                const currencyAmountOut = sdk_core_1.CurrencyAmount.fromRawAmount(sdkTokenOut, quoteResult[0].toString());\n                trade = v3_sdk_1.Trade.createUncheckedTrade({\n                    route,\n                    inputAmount: currencyAmountIn,\n                    outputAmount: currencyAmountOut,\n                    tradeType: sdk_core_1.TradeType.EXACT_INPUT,\n                });\n            }\n            else {\n                const amountOutWei = ethers_1.ethers.parseUnits(amountOut, tokenOutInfo.decimals);\n                const currencyAmountOut = sdk_core_1.CurrencyAmount.fromRawAmount(sdkTokenOut, amountOutWei.toString());\n                const currencyAmountIn = sdk_core_1.CurrencyAmount.fromRawAmount(sdkTokenIn, quoteResult[0].toString());\n                trade = v3_sdk_1.Trade.createUncheckedTrade({\n                    route,\n                    inputAmount: currencyAmountIn,\n                    outputAmount: currencyAmountOut,\n                    tradeType: sdk_core_1.TradeType.EXACT_OUTPUT,\n                });\n            }\n            // Format the result\n            const formattedAmountIn = ethers_1.ethers.formatUnits(trade.inputAmount.quotient.toString(), tokenInInfo.decimals);\n            const formattedAmountOut = ethers_1.ethers.formatUnits(trade.outputAmount.quotient.toString(), tokenOutInfo.decimals);\n            return {\n                amountIn: formattedAmountIn,\n                amountOut: formattedAmountOut,\n                route: bestRoute,\n                priceImpact: trade.priceImpact.toSignificant(2),\n                executionPrice: trade.executionPrice.toSignificant(6),\n                feeTier: [poolInfo.fee],\n                poolAddress: [poolAddress],\n                gasEstimate: quoteResult[3].toString()\n            };\n        }\n        else {\n            // For indirect routes, we need to do two quotes\n            const intermediaryToken = bestRoute.intermediaryToken;\n            const sdkIntermediaryToken = new sdk_core_1.Token(constants_1.CHAIN_ID, intermediaryToken.address, intermediaryToken.decimals, intermediaryToken.symbol, intermediaryToken.name);\n            // Get pool info for both hops\n            const poolAddress1 = bestRoute.path[0].id;\n            const poolAddress2 = bestRoute.path[1].id;\n            const poolInfo1 = await (0, utils_1.getPoolInfo)(poolAddress1, this.provider);\n            const poolInfo2 = await (0, utils_1.getPoolInfo)(poolAddress2, this.provider);\n            // Create SDK pools\n            const pool1 = new v3_sdk_1.Pool(sdkTokenIn, sdkIntermediaryToken, poolInfo1.fee, poolInfo1.sqrtPriceX96.toString(), poolInfo1.liquidity.toString(), poolInfo1.tick);\n            const pool2 = new v3_sdk_1.Pool(sdkIntermediaryToken, sdkTokenOut, poolInfo2.fee, poolInfo2.sqrtPriceX96.toString(), poolInfo2.liquidity.toString(), poolInfo2.tick);\n            // Create a route\n            const route = new v3_sdk_1.Route([pool1, pool2], sdkTokenIn, sdkTokenOut);\n            // Create a trade\n            let trade;\n            if (tradeType === sdk_core_1.TradeType.EXACT_INPUT) {\n                const amountInWei = ethers_1.ethers.parseUnits(amountIn, tokenInInfo.decimals);\n                const currencyAmountIn = sdk_core_1.CurrencyAmount.fromRawAmount(sdkTokenIn, amountInWei.toString());\n                // Get quote from contract\n                const quoteParams = v3_sdk_1.SwapQuoter.quoteCallParameters(route, currencyAmountIn, sdk_core_1.TradeType.EXACT_INPUT, { useQuoterV2: true });\n                const quoteCallReturnData = await this.provider.call({\n                    to: constants_1.ADDRESSES.QUOTER_V2,\n                    data: quoteParams.calldata,\n                });\n                const amountOut = ethers_1.ethers.AbiCoder.defaultAbiCoder().decode(['uint256'], quoteCallReturnData)[0];\n                const currencyAmountOut = sdk_core_1.CurrencyAmount.fromRawAmount(sdkTokenOut, amountOut.toString());\n                trade = v3_sdk_1.Trade.createUncheckedTrade({\n                    route,\n                    inputAmount: currencyAmountIn,\n                    outputAmount: currencyAmountOut,\n                    tradeType: sdk_core_1.TradeType.EXACT_INPUT,\n                });\n            }\n            else {\n                const amountOutWei = ethers_1.ethers.parseUnits(amountOut, tokenOutInfo.decimals);\n                const currencyAmountOut = sdk_core_1.CurrencyAmount.fromRawAmount(sdkTokenOut, amountOutWei.toString());\n                // Get quote from contract\n                const quoteParams = v3_sdk_1.SwapQuoter.quoteCallParameters(route, currencyAmountOut, sdk_core_1.TradeType.EXACT_OUTPUT, { useQuoterV2: true });\n                const quoteCallReturnData = await this.provider.call({\n                    to: constants_1.ADDRESSES.QUOTER_V2,\n                    data: quoteParams.calldata,\n                });\n                const amountIn = ethers_1.ethers.AbiCoder.defaultAbiCoder().decode(['uint256'], quoteCallReturnData)[0];\n                const currencyAmountIn = sdk_core_1.CurrencyAmount.fromRawAmount(sdkTokenIn, amountIn.toString());\n                trade = v3_sdk_1.Trade.createUncheckedTrade({\n                    route,\n                    inputAmount: currencyAmountIn,\n                    outputAmount: currencyAmountOut,\n                    tradeType: sdk_core_1.TradeType.EXACT_OUTPUT,\n                });\n            }\n            // Format the result\n            const formattedAmountIn = ethers_1.ethers.formatUnits(trade.inputAmount.quotient.toString(), tokenInInfo.decimals);\n            const formattedAmountOut = ethers_1.ethers.formatUnits(trade.outputAmount.quotient.toString(), tokenOutInfo.decimals);\n            return {\n                amountIn: formattedAmountIn,\n                amountOut: formattedAmountOut,\n                route: bestRoute,\n                priceImpact: trade.priceImpact.toSignificant(2),\n                executionPrice: trade.executionPrice.toSignificant(6),\n                feeTier: [poolInfo1.fee, poolInfo2.fee], // Combined fee for multi-hop\n                intermediaryToken: intermediaryToken.address,\n                poolAddress: [poolAddress1, poolAddress2], // Both pool addresses for multi-hop\n                gasEstimate: '0' // Gas estimate not available for multi-hop swaps\n            };\n        }\n    }\n    /**\n     * Get all available fee tiers for a token pair\n     * @param tokenA First token address\n     * @param tokenB Second token address\n     * @returns Promise resolving to an array of available fee tiers\n     */\n    async getAvailableFeeTiers(tokenA, tokenB) {\n        const [token0, token1] = (0, utils_1.sortTokens)(tokenA, tokenB);\n        const availableFeeTiers = [];\n        // Check each fee tier\n        for (const feeTier of Object.values(constants_1.FEE_TIERS)) {\n            const factoryContract = new ethers_1.ethers.Contract(constants_1.ADDRESSES.UNISWAP_V3_FACTORY, ['function getPool(address, address, uint24) view returns (address)'], this.provider);\n            const poolAddress = await factoryContract.getPool(token0, token1, feeTier);\n            // If pool exists and has liquidity, add fee tier to available tiers\n            if (poolAddress !== ethers_1.ethers.ZeroAddress) {\n                const poolContract = new ethers_1.ethers.Contract(poolAddress, ['function liquidity() view returns (uint128)'], this.provider);\n                const liquidity = await poolContract.liquidity();\n                if (liquidity > 0) {\n                    availableFeeTiers.push(Number(feeTier));\n                }\n            }\n        }\n        return availableFeeTiers;\n    }\n}\nexports.Quoter = Quoter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../dist/quoter.js\n");

/***/ }),

/***/ "../../dist/router.js":
/*!****************************!*\
  !*** ../../dist/router.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Router = void 0;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"../../node_modules/ethers/lib.commonjs/index.js\");\nconst bignumber_js_1 = __importDefault(__webpack_require__(/*! bignumber.js */ \"bignumber.js\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"../../dist/constants.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"../../dist/types.js\");\n/**\n * SailFish Router class for executing swaps\n */\nclass Router {\n    /**\n     * Create a new Router instance\n     * @param providerOrSigner An ethers Provider or Signer\n     */\n    constructor(providerOrSigner) {\n        if ('provider' in providerOrSigner && typeof providerOrSigner.provider !== 'undefined') {\n            // It's a signer\n            this.signer = providerOrSigner;\n            this.provider = providerOrSigner.provider;\n        }\n        else {\n            // It's a provider\n            this.provider = providerOrSigner;\n        }\n        this.routerContract = new ethers_1.ethers.Contract(constants_1.ADDRESSES.SWAP_ROUTER, constants_1.ROUTER_ABI, this.signer || this.provider);\n    }\n    /**\n     * Check if the router has a signer\n     * @returns True if the router has a signer\n     */\n    hasSigner() {\n        if (!this.signer) {\n            throw new Error('This operation requires a signer');\n        }\n        return true;\n    }\n    /**\n     * Approve a token for spending by the router\n     * @param tokenAddress Token address\n     * @param amount Amount to approve\n     * @returns Transaction response\n     */\n    async approveToken(tokenAddress, amount) {\n        this.hasSigner();\n        const tokenContract = new ethers_1.ethers.Contract(tokenAddress, constants_1.ERC20_ABI, this.signer);\n        return tokenContract.approve(constants_1.ADDRESSES.SWAP_ROUTER, amount);\n    }\n    /**\n     * Check if a token is approved for spending by the router\n     * @param tokenAddress Token address\n     * @param amount Amount to check\n     * @returns True if the token is approved for the amount\n     */\n    async isTokenApproved(tokenAddress, amount) {\n        this.hasSigner();\n        const tokenContract = new ethers_1.ethers.Contract(tokenAddress, constants_1.ERC20_ABI, this.provider);\n        const signerAddress = await this.signer.getAddress();\n        const allowance = await tokenContract.allowance(signerAddress, constants_1.ADDRESSES.SWAP_ROUTER);\n        return ethers_1.ethers.getBigInt(allowance) >= ethers_1.ethers.getBigInt(amount);\n    }\n    /**\n     * Execute an exact input swap (swap a fixed amount of input token for as much output token as possible)\n     * @param params Swap parameters\n     * @returns Transaction response\n     */\n    async exactInputSingle(params) {\n        this.hasSigner();\n        const value = params.tokenIn.toLowerCase() === constants_1.ADDRESSES.WEDU.toLowerCase()\n            ? params.amountIn\n            : 0;\n        return this.routerContract.exactInputSingle(params, { value });\n    }\n    /**\n     * Execute an exact output swap (swap as little input token as possible for a fixed amount of output token)\n     * @param params Swap parameters\n     * @returns Transaction response\n     */\n    async exactOutputSingle(params) {\n        this.hasSigner();\n        const value = params.tokenIn.toLowerCase() === constants_1.ADDRESSES.WEDU.toLowerCase()\n            ? params.amountInMaximum\n            : 0;\n        return this.routerContract.exactOutputSingle(params, { value });\n    }\n    /**\n     * Execute a multi-hop exact input swap\n     * @param params Swap parameters\n     * @returns Transaction response\n     */\n    async exactInput(params) {\n        this.hasSigner();\n        // Check if the first token in the path is WEDU\n        const isFirstTokenWETH = params.path.startsWith(constants_1.ADDRESSES.WEDU.toLowerCase().slice(2));\n        const value = isFirstTokenWETH ? params.amountIn : 0;\n        return this.routerContract.exactInput(params, { value });\n    }\n    /**\n     * Execute a multi-hop exact output swap\n     * @param params Swap parameters\n     * @returns Transaction response\n     */\n    async exactOutput(params) {\n        this.hasSigner();\n        // Check if the last token in the path is WEDU (path is reversed for exactOutput)\n        const isLastTokenWETH = params.path.endsWith(constants_1.ADDRESSES.WEDU.toLowerCase().slice(2));\n        const value = isLastTokenWETH ? params.amountInMaximum : 0;\n        return this.routerContract.exactOutput(params, { value });\n    }\n    /**\n     * Execute a swap with multiple calls in a single transaction\n     * @param calls Array of encoded function calls\n     * @param value ETH value to send with the transaction\n     * @returns Transaction response\n     */\n    async multicall(calls, value = 0) {\n        this.hasSigner();\n        return this.routerContract.multicall(calls, { value });\n    }\n    /**\n     * Unwrap WEDU to native ETH\n     * @param amountMinimum Minimum amount to unwrap\n     * @param recipient Recipient address\n     * @returns Transaction response\n     */\n    async unwrapWETH9(amountMinimum, recipient) {\n        this.hasSigner();\n        return this.routerContract.unwrapWETH9(amountMinimum, recipient);\n    }\n    /**\n     * Refund any ETH left from a swap\n     * @returns Transaction response\n     */\n    async refundETH() {\n        this.hasSigner();\n        return this.routerContract.refundETH();\n    }\n    /**\n     * Sweep any tokens left from a swap\n     * @param token Token address\n     * @param amountMinimum Minimum amount to sweep\n     * @param recipient Recipient address\n     * @returns Transaction response\n     */\n    async sweepToken(token, amountMinimum, recipient) {\n        this.hasSigner();\n        return this.routerContract.sweepToken(token, amountMinimum, recipient);\n    }\n    /**\n     * Create a swap transaction with common parameters\n     * @param tokenIn Input token address\n     * @param tokenOut Output token address\n     * @param fee Fee tier\n     * @param amountIn Amount of input token (for exact input swaps)\n     * @param amountOut Amount of output token (for exact output swaps)\n     * @param tradeType Trade type (exact input or exact output)\n     * @param options Swap options\n     * @returns Transaction parameters\n     */\n    async createSwapTransaction(tokenIn, tokenOut, fee, amountIn, amountOut, tradeType, options = {}) {\n        const recipient = options.recipient || (this.signer ? await this.signer.getAddress() : '');\n        const deadline = options.deadline || Math.floor(Date.now() / 1000) + 60 * 20; // 20 minutes from now\n        const slippagePercentage = options.slippagePercentage || 0.5; // 0.5% default slippage\n        // Calculate slippage-adjusted amounts\n        const slippageFactor = new bignumber_js_1.default(1).minus(new bignumber_js_1.default(slippagePercentage).div(100));\n        if (tradeType === types_1.TradeType.EXACT_INPUT) {\n            const amountOutMinimum = new bignumber_js_1.default(amountOut.toString()).times(slippageFactor).toFixed(0);\n            return {\n                tokenIn,\n                tokenOut,\n                fee,\n                recipient,\n                deadline,\n                amountIn,\n                amountOutMinimum,\n                sqrtPriceLimitX96: 0\n            };\n        }\n        else {\n            const amountInMaximum = new bignumber_js_1.default(amountIn.toString()).div(slippageFactor).toFixed(0);\n            return {\n                tokenIn,\n                tokenOut,\n                fee,\n                recipient,\n                deadline,\n                amountOut,\n                amountInMaximum,\n                sqrtPriceLimitX96: 0\n            };\n        }\n    }\n    /**\n     * Create a multi-hop swap transaction with common parameters\n     * @param tokenIn Input token address\n     * @param tokenOut Output token address\n     * @param intermediaryToken Intermediary token address\n     * @param feeTier1 Fee tier for the first hop\n     * @param feeTier2 Fee tier for the second hop\n     * @param amountIn Amount of input token (for exact input swaps)\n     * @param amountOut Amount of output token (for exact output swaps)\n     * @param tradeType Trade type (exact input or exact output)\n     * @param options Swap options\n     * @returns Transaction parameters\n     */\n    async createMultihopSwapTransaction(tokenIn, intermediaryToken, tokenOut, feeTier1, feeTier2, amountIn, amountOut, tradeType, options = {}) {\n        const recipient = options.recipient || (this.signer ? await this.signer.getAddress() : '');\n        const deadline = options.deadline || Math.floor(Date.now() / 1000) + 60 * 20; // 20 minutes from now\n        const slippagePercentage = options.slippagePercentage || 0.5; // 0.5% default slippage\n        // Calculate slippage-adjusted amounts\n        const slippageFactor = new bignumber_js_1.default(1).minus(new bignumber_js_1.default(slippagePercentage).div(100));\n        // Create the path by encoding the tokens and fees\n        let path;\n        if (tradeType === types_1.TradeType.EXACT_INPUT) {\n            // For exact input, the path is tokenIn -> intermediaryToken -> tokenOut\n            path = ethers_1.ethers.solidityPacked(['address', 'uint24', 'address', 'uint24', 'address'], [\n                tokenIn,\n                feeTier1,\n                intermediaryToken,\n                feeTier2,\n                tokenOut\n            ]);\n            const amountOutMinimum = new bignumber_js_1.default(amountOut.toString()).times(slippageFactor).toFixed(0);\n            return {\n                path,\n                recipient,\n                deadline,\n                amountIn,\n                amountOutMinimum\n            };\n        }\n        else {\n            // For exact output, the path is tokenOut -> intermediaryToken -> tokenIn (reversed)\n            path = ethers_1.ethers.solidityPacked(['address', 'uint24', 'address', 'uint24', 'address'], [\n                tokenOut,\n                feeTier2,\n                intermediaryToken,\n                feeTier1,\n                tokenIn\n            ]);\n            const amountInMaximum = new bignumber_js_1.default(amountIn.toString()).div(slippageFactor).toFixed(0);\n            return {\n                path,\n                recipient,\n                deadline,\n                amountOut,\n                amountInMaximum\n            };\n        }\n    }\n}\nexports.Router = Router;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../dist/router.js\n");

/***/ }),

/***/ "../../dist/types.js":
/*!***************************!*\
  !*** ../../dist/types.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TradeType = void 0;\nvar TradeType;\n(function (TradeType) {\n    TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n    TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(TradeType || (exports.TradeType = TradeType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vZGlzdC90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdCQUFnQixpQkFBaUIsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLWJyaWRnZS1leGFtcGxlLy4uLy4uL2Rpc3QvdHlwZXMuanM/NjMyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHJhZGVUeXBlID0gdm9pZCAwO1xudmFyIFRyYWRlVHlwZTtcbihmdW5jdGlvbiAoVHJhZGVUeXBlKSB7XG4gICAgVHJhZGVUeXBlW1RyYWRlVHlwZVtcIkVYQUNUX0lOUFVUXCJdID0gMF0gPSBcIkVYQUNUX0lOUFVUXCI7XG4gICAgVHJhZGVUeXBlW1RyYWRlVHlwZVtcIkVYQUNUX09VVFBVVFwiXSA9IDFdID0gXCJFWEFDVF9PVVRQVVRcIjtcbn0pKFRyYWRlVHlwZSB8fCAoZXhwb3J0cy5UcmFkZVR5cGUgPSBUcmFkZVR5cGUgPSB7fSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../dist/types.js\n");

/***/ }),

/***/ "../../dist/ui/BridgeWidget.js":
/*!*************************************!*\
  !*** ../../dist/ui/BridgeWidget.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\nconst ethers_1 = __webpack_require__(/*! ethers */ \"../../node_modules/ethers/lib.commonjs/index.js\");\nconst bridge_1 = __webpack_require__(/*! ../bridge */ \"../../dist/bridge.js\");\n// Chain configurations\nconst CHAINS = {\n    bsc: {\n        name: \"BSC\",\n        icon: \"https://cryptologos.cc/logos/bnb-bnb-logo.png\",\n        rpcUrl: \"https://bsc-dataseed.binance.org/\",\n        chainId: 56,\n        explorerUrl: \"https://bscscan.com\",\n        eduAddress: \"0xBdEAe1cA48894A1759A8374D63925f21f2Ee2639\",\n        nativeSymbol: \"BNB\",\n    },\n    arbitrum: {\n        name: \"Arbitrum\",\n        icon: \"https://cryptologos.cc/logos/arbitrum-arb-logo.png\",\n        rpcUrl: \"https://arb1.arbitrum.io/rpc\",\n        chainId: 42161,\n        explorerUrl: \"https://arbiscan.io\",\n        eduAddress: \"0xf8173a39c56a554837C4C7f104153A005D284D11\",\n        nativeSymbol: \"ETH\",\n    },\n    educhain: {\n        name: \"EDUCHAIN\",\n        icon: \"/svgs/edu-chain.svg\", // Assuming this path exists in the host application\n        rpcUrl: \"https://rpc.edu-chain.raas.gelato.cloud\",\n        chainId: 41923,\n        explorerUrl: \"https://educhain.blockscout.com\",\n        eduAddress: \"0xd02E8c38a8E3db71f8b2ae30B8186d7874934e12\",\n        nativeSymbol: \"EDU\",\n    },\n};\n// Allowed bridge paths\nconst ALLOWED_PATHS = [\n    { from: \"bsc\", to: \"arbitrum\" },\n    { from: \"arbitrum\", to: \"educhain\" },\n];\nconst BridgeWidget = ({ onClose, isPopup = false, defaultFromChain = \"bsc\", defaultToChain = \"arbitrum\", defaultAmount = \"0\", signer, onSuccess, onError, }) => {\n    // State\n    const [fromChain, setFromChain] = (0, react_1.useState)(defaultFromChain);\n    const [toChain, setToChain] = (0, react_1.useState)(defaultToChain);\n    const [amount, setAmount] = (0, react_1.useState)(defaultAmount);\n    const [loading, setLoading] = (0, react_1.useState)(false);\n    const [error, setError] = (0, react_1.useState)(null);\n    const [success, setSuccess] = (0, react_1.useState)(null);\n    const [step, setStep] = (0, react_1.useState)(\"input\");\n    const [fee, setFee] = (0, react_1.useState)(null);\n    const [balance, setBalance] = (0, react_1.useState)(null);\n    const [isApproved, setIsApproved] = (0, react_1.useState)(false);\n    const [currentSigner, setCurrentSigner] = (0, react_1.useState)(null);\n    const [userAddress, setUserAddress] = (0, react_1.useState)(null);\n    // Initialize signer and check wallet connection\n    (0, react_1.useEffect)(() => {\n        const initSigner = async () => {\n            if (signer) {\n                setCurrentSigner(signer);\n                const address = await signer.getAddress();\n                setUserAddress(address);\n                return;\n            }\n            // If no signer provided, try to get one from window.ethereum\n            if (typeof window !== \"undefined\" && window.ethereum) {\n                try {\n                    await window.ethereum.request({ method: \"eth_requestAccounts\" });\n                    const provider = new ethers_1.ethers.BrowserProvider(window.ethereum);\n                    const connectedSigner = await provider.getSigner();\n                    setCurrentSigner(connectedSigner);\n                    const address = await connectedSigner.getAddress();\n                    setUserAddress(address);\n                }\n                catch (err) {\n                    console.error(\"Failed to connect wallet:\", err);\n                    setError(\"Please connect your wallet to use the bridge.\");\n                }\n            }\n            else {\n                setError(\"No wallet detected. Please install MetaMask or another web3 wallet.\");\n            }\n        };\n        initSigner();\n    }, [signer]);\n    // Check if the selected path is valid\n    const isValidPath = ALLOWED_PATHS.some((path) => path.from === fromChain && path.to === toChain);\n    // Switch chains when from/to changes\n    (0, react_1.useEffect)(() => {\n        if (!isValidPath) {\n            // Find a valid path that includes the fromChain\n            const validPath = ALLOWED_PATHS.find((path) => path.from === fromChain);\n            if (validPath) {\n                setToChain(validPath.to);\n            }\n        }\n    }, [fromChain, isValidPath]);\n    // Update fee and balance when parameters change\n    (0, react_1.useEffect)(() => {\n        const updateFeeAndBalance = async () => {\n            if (!currentSigner ||\n                !userAddress ||\n                !isValidPath ||\n                !amount ||\n                parseFloat(amount) <= 0) {\n                return;\n            }\n            setLoading(true);\n            setError(null);\n            try {\n                // Create bridge instance\n                const bridge = new bridge_1.Bridge(currentSigner);\n                // Check balance\n                let hasEnough = false;\n                if (fromChain === \"bsc\") {\n                    hasEnough = await bridge.hasEnoughEdu(userAddress, amount);\n                    // Get fee for BSC to Arbitrum\n                    if (toChain === \"arbitrum\") {\n                        const estimatedFee = await bridge.estimateBridgeFee(amount, userAddress);\n                        setFee(`${estimatedFee} BNB`);\n                        // Check if approved\n                        const approved = await bridge.isEduApproved(userAddress, amount);\n                        setIsApproved(approved);\n                    }\n                }\n                else if (fromChain === \"arbitrum\") {\n                    hasEnough = await bridge.hasEnoughEduOnArb(userAddress, amount);\n                    // Check if approved for Arbitrum to EDUCHAIN\n                    if (toChain === \"educhain\") {\n                        const approved = await bridge.isEduApprovedOnArb(userAddress, amount);\n                        setIsApproved(approved);\n                        setFee(\"Gas fee only\");\n                    }\n                }\n                if (!hasEnough) {\n                    setError(`Insufficient EDU balance on ${CHAINS[fromChain].name}`);\n                }\n                else {\n                    setError(null);\n                }\n                // Get balance\n                const provider = currentSigner.provider;\n                const eduContract = new ethers_1.ethers.Contract(CHAINS[fromChain].eduAddress, [\n                    \"function balanceOf(address) view returns (uint256)\",\n                    \"function decimals() view returns (uint8)\",\n                ], provider);\n                const decimals = await eduContract.decimals();\n                const balanceWei = await eduContract.balanceOf(userAddress);\n                const balanceFormatted = ethers_1.ethers.formatUnits(balanceWei, decimals);\n                setBalance(balanceFormatted);\n            }\n            catch (err) {\n                console.error(\"Error updating fee and balance:\", err);\n                setError(\"Failed to get fee or balance information\");\n            }\n            finally {\n                setLoading(false);\n            }\n        };\n        updateFeeAndBalance();\n    }, [currentSigner, userAddress, fromChain, toChain, amount, isValidPath]);\n    // Handle chain switch\n    const handleChainSwitch = async () => {\n        if (!currentSigner)\n            return;\n        const provider = currentSigner.provider;\n        const network = await provider.getNetwork();\n        const currentChainId = network.chainId;\n        const targetChainId = CHAINS[fromChain].chainId;\n        if (currentChainId !== BigInt(targetChainId)) {\n            if (typeof window !== \"undefined\" && window.ethereum) {\n                try {\n                    await window.ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: `0x${targetChainId.toString(16)}` }],\n                    });\n                }\n                catch (err) {\n                    console.error(\"Failed to switch network:\", err);\n                    setError(`Please switch your wallet to ${CHAINS[fromChain].name} network`);\n                }\n            }\n        }\n    };\n    // Handle approval\n    const handleApprove = async () => {\n        if (!currentSigner || !userAddress)\n            return;\n        setLoading(true);\n        setError(null);\n        try {\n            const bridge = new bridge_1.Bridge(currentSigner);\n            // Approve based on the chain\n            let tx;\n            if (fromChain === \"bsc\") {\n                tx = await bridge.approveEdu(amount);\n            }\n            else if (fromChain === \"arbitrum\") {\n                tx = await bridge.approveEduOnArb(amount);\n            }\n            if (!tx) {\n                throw new Error(\"Failed to create approval transaction\");\n            }\n            setStep(\"approval\");\n            await tx.wait();\n            setIsApproved(true);\n            setStep(\"confirmation\");\n        }\n        catch (err) {\n            console.error(\"Approval failed:\", err);\n            setError(\"Failed to approve tokens\");\n        }\n        finally {\n            setLoading(false);\n        }\n    };\n    // Handle bridge\n    const handleBridge = async () => {\n        if (!currentSigner || !userAddress || !isValidPath)\n            return;\n        setLoading(true);\n        setError(null);\n        setStep(\"processing\");\n        try {\n            const bridge = new bridge_1.Bridge(currentSigner);\n            // Execute bridge based on the path\n            let tx;\n            if (fromChain === \"bsc\" && toChain === \"arbitrum\") {\n                tx = await bridge.bridgeEduFromBscToArb(amount, userAddress);\n            }\n            else if (fromChain === \"arbitrum\" && toChain === \"educhain\") {\n                tx = await bridge.bridgeEduFromArbToEdu(amount);\n            }\n            if (!tx) {\n                throw new Error(\"Failed to create bridge transaction\");\n            }\n            await tx.wait();\n            setSuccess(tx.hash);\n            setStep(\"complete\");\n            if (onSuccess) {\n                onSuccess(tx.hash);\n            }\n        }\n        catch (err) {\n            console.error(\"Bridge failed:\", err);\n            setError(\"Failed to bridge tokens\");\n            if (onError) {\n                onError(err);\n            }\n        }\n        finally {\n            setLoading(false);\n        }\n    };\n    // Render the widget\n    return (react_1.default.createElement(react_1.default.Fragment, null,\n        react_1.default.createElement(\"h1\", null, \"Hello\"),\n        react_1.default.createElement(\"div\", { className: `bridge-widget ${isPopup ? \"bridge-widget-popup\" : \"\"}` },\n            isPopup && (react_1.default.createElement(\"div\", { className: \"bridge-widget-header\" },\n                react_1.default.createElement(\"h2\", null, \"Bridge EDU Tokens\"),\n                onClose && (react_1.default.createElement(\"button\", { className: \"bridge-widget-close\", onClick: onClose }, \"\\u00D7\")))),\n            react_1.default.createElement(\"div\", { className: \"bridge-widget-content\" },\n                step === \"input\" && (react_1.default.createElement(react_1.default.Fragment, null,\n                    react_1.default.createElement(\"div\", { className: \"bridge-widget-chains\" },\n                        react_1.default.createElement(\"div\", { className: \"bridge-widget-chain\" },\n                            react_1.default.createElement(\"label\", null, \"From\"),\n                            react_1.default.createElement(\"select\", { value: fromChain, onChange: (e) => setFromChain(e.target.value), disabled: loading }, Object.entries(CHAINS).map(([key, chain]) => (react_1.default.createElement(\"option\", { key: key, value: key }, chain.name))))),\n                        react_1.default.createElement(\"div\", { className: \"bridge-widget-chain-arrow\" }, \"\\u2192\"),\n                        react_1.default.createElement(\"div\", { className: \"bridge-widget-chain\" },\n                            react_1.default.createElement(\"label\", null, \"To\"),\n                            react_1.default.createElement(\"select\", { value: toChain, onChange: (e) => setToChain(e.target.value), disabled: loading }, Object.entries(CHAINS).map(([key, chain]) => (react_1.default.createElement(\"option\", { key: key, value: key, disabled: !ALLOWED_PATHS.some((path) => path.from === fromChain && path.to === key) }, chain.name)))))),\n                    react_1.default.createElement(\"div\", { className: \"bridge-widget-amount\" },\n                        react_1.default.createElement(\"label\", null, \"Amount\"),\n                        react_1.default.createElement(\"div\", { className: \"bridge-widget-amount-input\" },\n                            react_1.default.createElement(\"input\", { type: \"number\", value: amount, onChange: (e) => setAmount(e.target.value), disabled: loading, placeholder: \"0.0\", min: \"0\", step: \"0.01\" }),\n                            react_1.default.createElement(\"span\", null, \"EDU\")),\n                        balance && (react_1.default.createElement(\"div\", { className: \"bridge-widget-balance\" },\n                            \"Balance: \",\n                            parseFloat(balance).toFixed(4),\n                            \" EDU\",\n                            react_1.default.createElement(\"button\", { onClick: () => setAmount(balance), className: \"bridge-widget-max-button\" }, \"MAX\")))),\n                    fee && (react_1.default.createElement(\"div\", { className: \"bridge-widget-fee\" },\n                        \"Estimated Fee: \",\n                        fee)),\n                    error && react_1.default.createElement(\"div\", { className: \"bridge-widget-error\" }, error),\n                    react_1.default.createElement(\"div\", { className: \"bridge-widget-actions\" }, !currentSigner ? (react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-connect\", onClick: handleChainSwitch }, \"Connect Wallet\")) : !isApproved ? (react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-approve\", onClick: handleApprove, disabled: loading ||\n                            !!error ||\n                            !isValidPath ||\n                            !amount ||\n                            parseFloat(amount) <= 0 }, loading ? \"Approving...\" : \"Approve\")) : (react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-bridge\", onClick: handleBridge, disabled: loading ||\n                            !!error ||\n                            !isValidPath ||\n                            !amount ||\n                            parseFloat(amount) <= 0 }, loading ? \"Processing...\" : \"Bridge\"))))),\n                step === \"approval\" && (react_1.default.createElement(\"div\", { className: \"bridge-widget-step\" },\n                    react_1.default.createElement(\"h3\", null, \"Approving Tokens\"),\n                    react_1.default.createElement(\"div\", { className: \"bridge-widget-loader\" }),\n                    react_1.default.createElement(\"p\", null, \"Please confirm the transaction in your wallet...\"))),\n                step === \"confirmation\" && (react_1.default.createElement(\"div\", { className: \"bridge-widget-step\" },\n                    react_1.default.createElement(\"h3\", null, \"Ready to Bridge\"),\n                    react_1.default.createElement(\"p\", null,\n                        \"You're about to bridge \",\n                        amount,\n                        \" EDU from\",\n                        \" \",\n                        CHAINS[fromChain].name,\n                        \" to \",\n                        CHAINS[toChain].name,\n                        \".\"),\n                    fee && react_1.default.createElement(\"p\", null,\n                        \"Estimated Fee: \",\n                        fee),\n                    react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-bridge\", onClick: handleBridge, disabled: loading }, loading ? \"Processing...\" : \"Confirm Bridge\"),\n                    react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-back\", onClick: () => setStep(\"input\"), disabled: loading }, \"Back\"))),\n                step === \"processing\" && (react_1.default.createElement(\"div\", { className: \"bridge-widget-step\" },\n                    react_1.default.createElement(\"h3\", null, \"Bridging in Progress\"),\n                    react_1.default.createElement(\"div\", { className: \"bridge-widget-loader\" }),\n                    react_1.default.createElement(\"p\", null, \"Please confirm the transaction in your wallet...\"))),\n                step === \"complete\" && (react_1.default.createElement(\"div\", { className: \"bridge-widget-step\" },\n                    react_1.default.createElement(\"h3\", null, \"Bridge Successful!\"),\n                    react_1.default.createElement(\"div\", { className: \"bridge-widget-success\" }, \"\\u2713\"),\n                    react_1.default.createElement(\"p\", null,\n                        \"You've successfully initiated the bridge of \",\n                        amount,\n                        \" EDU from\",\n                        \" \",\n                        CHAINS[fromChain].name,\n                        \" to \",\n                        CHAINS[toChain].name,\n                        \".\"),\n                    react_1.default.createElement(\"p\", null,\n                        \"The tokens will arrive in your wallet on \",\n                        CHAINS[toChain].name,\n                        \" \",\n                        \"shortly.\"),\n                    success && (react_1.default.createElement(\"a\", { href: `${CHAINS[fromChain].explorerUrl}/tx/${success}`, target: \"_blank\", rel: \"noopener noreferrer\", className: \"bridge-widget-link\" }, \"View Transaction\")),\n                    react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-new\", onClick: () => {\n                            setStep(\"input\");\n                            setSuccess(null);\n                            setAmount(\"0\");\n                        } }, \"New Bridge\")))),\n            react_1.default.createElement(\"div\", { className: \"bridge-widget-footer\" },\n                react_1.default.createElement(\"p\", null, \"Powered by SailFish DEX\")),\n            react_1.default.createElement(\"style\", null, `\n        .bridge-widget {\n          font-family: 'Inter', sans-serif;\n          background-color: #1a1b23;\n          color: #ffffff;\n          border-radius: 12px;\n          width: 100%;\n          max-width: 480px;\n          overflow: hidden;\n          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.25);\n        }\n\n        .bridge-widget-popup {\n          position: fixed;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          z-index: 1000;\n        }\n\n        .bridge-widget-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 16px 20px;\n          border-bottom: 1px solid #2d2e36;\n        }\n\n        .bridge-widget-header h2 {\n          margin: 0;\n          font-size: 18px;\n          font-weight: 600;\n        }\n\n        .bridge-widget-close {\n          background: none;\n          border: none;\n          color: #8f8f8f;\n          font-size: 24px;\n          cursor: pointer;\n        }\n\n        .bridge-widget-content {\n          padding: 24px;\n          min-height: 300px;\n        }\n\n        .bridge-widget-chains {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 24px;\n        }\n\n        .bridge-widget-chain {\n          flex: 1;\n        }\n\n        .bridge-widget-chain label {\n          display: block;\n          margin-bottom: 8px;\n          font-size: 14px;\n          color: #8f8f8f;\n        }\n\n        .bridge-widget-chain select {\n          width: 100%;\n          padding: 12px;\n          background-color: #2d2e36;\n          border: 1px solid #3a3b43;\n          border-radius: 8px;\n          color: #ffffff;\n          font-size: 16px;\n          appearance: none;\n          background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%238f8f8f' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\");\n          background-repeat: no-repeat;\n          background-position: right 12px center;\n        }\n\n        .bridge-widget-chain-arrow {\n          margin: 0 12px;\n          font-size: 20px;\n          color: #8f8f8f;\n        }\n\n        .bridge-widget-amount {\n          margin-bottom: 24px;\n        }\n\n        .bridge-widget-amount label {\n          display: block;\n          margin-bottom: 8px;\n          font-size: 14px;\n          color: #8f8f8f;\n        }\n\n        .bridge-widget-amount-input {\n          display: flex;\n          align-items: center;\n          background-color: #2d2e36;\n          border: 1px solid #3a3b43;\n          border-radius: 8px;\n          overflow: hidden;\n        }\n\n        .bridge-widget-amount-input input {\n          flex: 1;\n          padding: 12px;\n          background: transparent;\n          border: none;\n          color: #ffffff;\n          font-size: 16px;\n        }\n\n        .bridge-widget-amount-input span {\n          padding: 0 12px;\n          color: #8f8f8f;\n        }\n\n        .bridge-widget-balance {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-top: 8px;\n          font-size: 14px;\n          color: #8f8f8f;\n        }\n\n        .bridge-widget-max-button {\n          background: none;\n          border: none;\n          color: #3b82f6;\n          cursor: pointer;\n          font-size: 12px;\n          font-weight: 600;\n        }\n\n        .bridge-widget-fee {\n          margin-bottom: 24px;\n          padding: 12px;\n          background-color: #2d2e36;\n          border-radius: 8px;\n          font-size: 14px;\n        }\n\n        .bridge-widget-error {\n          margin-bottom: 24px;\n          padding: 12px;\n          background-color: rgba(239, 68, 68, 0.1);\n          border-left: 3px solid #ef4444;\n          border-radius: 4px;\n          color: #ef4444;\n          font-size: 14px;\n        }\n\n        .bridge-widget-actions {\n          display: flex;\n          justify-content: center;\n        }\n\n        .bridge-widget-button {\n          padding: 12px 24px;\n          border: none;\n          border-radius: 8px;\n          font-size: 16px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: background-color 0.2s;\n          width: 100%;\n        }\n\n        .bridge-widget-connect {\n          background-color: #3b82f6;\n          color: #ffffff;\n        }\n\n        .bridge-widget-approve {\n          background-color: #8b5cf6;\n          color: #ffffff;\n        }\n\n        .bridge-widget-bridge {\n          background-color: #10b981;\n          color: #ffffff;\n        }\n\n        .bridge-widget-back {\n          background-color: #6b7280;\n          color: #ffffff;\n          margin-top: 12px;\n        }\n\n        .bridge-widget-new {\n          background-color: #3b82f6;\n          color: #ffffff;\n        }\n\n        .bridge-widget-button:hover {\n          opacity: 0.9;\n        }\n\n        .bridge-widget-button:disabled {\n          background-color: #4b5563;\n          cursor: not-allowed;\n          opacity: 0.7;\n        }\n\n        .bridge-widget-step {\n          text-align: center;\n        }\n\n        .bridge-widget-step h3 {\n          margin-bottom: 24px;\n          font-size: 18px;\n          font-weight: 600;\n        }\n\n        .bridge-widget-loader {\n          margin: 0 auto 24px;\n          width: 48px;\n          height: 48px;\n          border: 4px solid rgba(59, 130, 246, 0.2);\n          border-left-color: #3b82f6;\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n        }\n\n        @keyframes spin {\n          to {\n            transform: rotate(360deg);\n          }\n        }\n\n        .bridge-widget-success {\n          margin: 0 auto 24px;\n          width: 48px;\n          height: 48px;\n          background-color: #10b981;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 24px;\n          color: #ffffff;\n        }\n\n        .bridge-widget-link {\n          display: inline-block;\n          margin: 16px 0;\n          color: #3b82f6;\n          text-decoration: none;\n        }\n\n        .bridge-widget-link:hover {\n          text-decoration: underline;\n        }\n\n        .bridge-widget-footer {\n          padding: 12px 24px;\n          border-top: 1px solid #2d2e36;\n          text-align: center;\n          font-size: 12px;\n          color: #8f8f8f;\n        }\n      `))));\n};\nexports[\"default\"] = BridgeWidget;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../dist/ui/BridgeWidget.js\n");

/***/ }),

/***/ "../../dist/utils.js":
/*!***************************!*\
  !*** ../../dist/utils.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getTokenInfo = getTokenInfo;\nexports.getPoolAddress = getPoolAddress;\nexports.getPoolInfo = getPoolInfo;\nexports.sortTokens = sortTokens;\nexports.encodePath = encodePath;\nexports.calculatePriceFromSqrtPriceX96 = calculatePriceFromSqrtPriceX96;\nexports.amount1 = amount1;\nexports.liquidity0 = liquidity0;\nexports.priceToTick = priceToTick;\nexports.tickToPrice = tickToPrice;\nexports.tickToSqrtPriceX96 = tickToSqrtPriceX96;\nconst ethers_1 = __webpack_require__(/*! ethers */ \"../../node_modules/ethers/lib.commonjs/index.js\");\nconst bignumber_js_1 = __importDefault(__webpack_require__(/*! bignumber.js */ \"bignumber.js\"));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"../../dist/constants.js\");\n/**\n * Create a Token object from an address\n * @param address Token address\n * @param provider Ethers provider\n * @returns Promise resolving to a Token object\n */\nasync function getTokenInfo(address, provider) {\n    const tokenContract = new ethers_1.ethers.Contract(address, constants_1.ERC20_ABI, provider);\n    const [decimals, symbol, name] = await Promise.all([\n        tokenContract.decimals(),\n        tokenContract.symbol(),\n        tokenContract.symbol() // Using symbol as name since most ERC20s don't have a name() function\n    ]);\n    return {\n        address,\n        decimals: Number(decimals),\n        symbol,\n        name\n    };\n}\n/**\n * Get pool address for a token pair and fee\n * @param tokenA First token address\n * @param tokenB Second token address\n * @param fee Fee tier\n * @param provider Ethers provider\n * @returns Pool address\n */\nasync function getPoolAddress(tokenA, tokenB, fee, provider) {\n    const factoryContract = new ethers_1.ethers.Contract(constants_1.ADDRESSES.UNISWAP_V3_FACTORY, constants_1.UNISWAP_V3_FACTORY_ABI, provider);\n    return factoryContract.getPool(tokenA, tokenB, fee);\n}\n/**\n * Get pool information\n * @param poolAddress Pool address\n * @param provider Ethers provider\n * @returns Pool information\n */\nasync function getPoolInfo(poolAddress, provider) {\n    const poolContract = new ethers_1.ethers.Contract(poolAddress, constants_1.UNISWAP_V3_POOL_ABI, provider);\n    const [token0, token1, fee, liquidity, slot0] = await Promise.all([\n        poolContract.token0(),\n        poolContract.token1(),\n        poolContract.fee(),\n        poolContract.liquidity(),\n        poolContract.slot0(),\n    ]);\n    const token0Contract = new ethers_1.ethers.Contract(token0, constants_1.ERC20_ABI, provider);\n    const token1Contract = new ethers_1.ethers.Contract(token1, constants_1.ERC20_ABI, provider);\n    const [reserve0, reserve1] = await Promise.all([\n        {\n            balance: await token0Contract.balanceOf(poolAddress),\n            name: await token0Contract.symbol(),\n            decimals: await token0Contract.decimals(),\n        },\n        {\n            balance: await token1Contract.balanceOf(poolAddress),\n            name: await token1Contract.symbol(),\n            decimals: await token1Contract.decimals(),\n        },\n    ]);\n    return {\n        token0,\n        token1,\n        fee: Number(fee),\n        liquidity,\n        sqrtPriceX96: slot0[0],\n        tick: Number(slot0[1]),\n        reserve0,\n        reserve1,\n    };\n}\n/**\n * Sort tokens by address\n * @param tokenA First token\n * @param tokenB Second token\n * @returns Sorted tokens [token0, token1]\n */\nfunction sortTokens(tokenA, tokenB) {\n    return tokenA.toLowerCase() < tokenB.toLowerCase()\n        ? [tokenA, tokenB]\n        : [tokenB, tokenA];\n}\n/**\n * Encode path for multi-hop swaps\n * @param path Array of token addresses and fees\n * @returns Encoded path\n */\nfunction encodePath(path) {\n    let encoded = '';\n    for (let i = 0; i < path.length; i++) {\n        encoded += path[i].token;\n        if (i < path.length - 1) {\n            encoded += toHex(path[i].fee, 3);\n        }\n    }\n    return encoded;\n}\n/**\n * Convert a number to a hex string with specified byte length\n * @param num Number to convert\n * @param length Byte length\n * @returns Hex string\n */\nfunction toHex(num, length) {\n    return '0x' + num.toString(16).padStart(length * 2, '0');\n}\n/**\n * Calculate price from sqrtPriceX96\n * @param sqrtPriceX96 Square root price in X96 format\n * @param token0Decimals Decimals of token0\n * @param token1Decimals Decimals of token1\n * @returns Price of token1 in terms of token0\n */\nfunction calculatePriceFromSqrtPriceX96(sqrtPriceX96, token0Decimals, token1Decimals) {\n    // Convert to BigNumber if it's not already\n    const sqrtPriceX96BN = new bignumber_js_1.default(sqrtPriceX96.toString());\n    // Q96 = 2^96\n    const Q96 = new bignumber_js_1.default(2).pow(96);\n    // Convert to decimal for the sqrt price\n    const sqrtPriceDecimal = sqrtPriceX96BN.div(Q96);\n    // Square it to get the price\n    const price = sqrtPriceDecimal.pow(2);\n    // Adjust for decimals\n    const adjustedPrice = price.times(new bignumber_js_1.default(10).pow(token0Decimals - token1Decimals));\n    return adjustedPrice.toNumber();\n}\n/**\n * Calculate amount of token1 for a given amount of token0 and liquidity\n * @param amount0 Amount of token0\n * @param sqrtPriceX96 Square root price in X96 format\n * @param sqrtPriceX96Upper Upper square root price in X96 format\n * @returns Amount of token1\n */\nfunction amount1(liquidity, sqrtPriceX96Lower, sqrtPriceX96) {\n    const liquidityBN = new bignumber_js_1.default(liquidity.toString());\n    const sqrtPriceX96LowerBN = new bignumber_js_1.default(sqrtPriceX96Lower.toString());\n    const sqrtPriceX96BN = new bignumber_js_1.default(sqrtPriceX96.toString());\n    return liquidityBN.times(sqrtPriceX96BN.minus(sqrtPriceX96LowerBN)).div(new bignumber_js_1.default(2).pow(96));\n}\n/**\n * Calculate liquidity for a given amount of token0\n * @param amount0 Amount of token0\n * @param sqrtPriceX96 Square root price in X96 format\n * @param sqrtPriceX96Upper Upper square root price in X96 format\n * @returns Liquidity\n */\nfunction liquidity0(amount0, sqrtPriceX96, sqrtPriceX96Upper) {\n    const amount0BN = new bignumber_js_1.default(amount0.toString());\n    const sqrtPriceX96BN = new bignumber_js_1.default(sqrtPriceX96.toString());\n    const sqrtPriceX96UpperBN = new bignumber_js_1.default(sqrtPriceX96Upper.toString());\n    return amount0BN\n        .times(sqrtPriceX96BN)\n        .times(sqrtPriceX96UpperBN)\n        .div(sqrtPriceX96UpperBN.minus(sqrtPriceX96BN))\n        .div(new bignumber_js_1.default(2).pow(96));\n}\n/**\n * Calculate tick from price\n * @param price Price\n * @returns Tick\n */\nfunction priceToTick(price) {\n    return Math.floor(Math.log(price) / Math.log(1.0001));\n}\n/**\n * Calculate price from tick\n * @param tick Tick\n * @returns Price\n */\nfunction tickToPrice(tick) {\n    return Math.pow(1.0001, tick);\n}\n/**\n * Calculate square root price in X96 format from tick\n * @param tick Tick\n * @returns Square root price in X96 format\n */\nfunction tickToSqrtPriceX96(tick) {\n    const price = tickToPrice(tick);\n    const sqrtPrice = Math.sqrt(price);\n    return new bignumber_js_1.default(sqrtPrice).times(new bignumber_js_1.default(2).pow(96));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../dist/utils.js\n");

/***/ }),

/***/ "?3713":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?8e41":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ })

};
;