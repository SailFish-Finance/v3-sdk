"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("dist_index_js",{

/***/ "../../dist/ui/BridgeWidget.js":
/*!*************************************!*\
  !*** ../../dist/ui/BridgeWidget.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"../../node_modules/react/index.js\"));\nconst ethers_1 = __webpack_require__(/*! ethers */ \"../../node_modules/ethers/lib.commonjs/index.js\");\nconst bridge_1 = __webpack_require__(/*! ../bridge */ \"../../dist/bridge.js\");\n// Chain configurations\nconst CHAINS = {\n    bsc: {\n        name: \"BSC\",\n        icon: \"https://cryptologos.cc/logos/bnb-bnb-logo.png\",\n        rpcUrl: \"https://bsc-dataseed.binance.org/\",\n        chainId: 56,\n        explorerUrl: \"https://bscscan.com\",\n        eduAddress: \"0xBdEAe1cA48894A1759A8374D63925f21f2Ee2639\",\n        nativeSymbol: \"BNB\",\n    },\n    arbitrum: {\n        name: \"Arbitrum\",\n        icon: \"https://cryptologos.cc/logos/arbitrum-arb-logo.png\",\n        rpcUrl: \"https://arb1.arbitrum.io/rpc\",\n        chainId: 42161,\n        explorerUrl: \"https://arbiscan.io\",\n        eduAddress: \"0xf8173a39c56a554837C4C7f104153A005D284D11\",\n        nativeSymbol: \"ETH\",\n    },\n    educhain: {\n        name: \"EDUCHAIN\",\n        icon: \"/svgs/edu-chain.svg\", // Assuming this path exists in the host application\n        rpcUrl: \"https://rpc.edu-chain.raas.gelato.cloud\",\n        chainId: 41923,\n        explorerUrl: \"https://educhain.blockscout.com\",\n        eduAddress: \"0xd02E8c38a8E3db71f8b2ae30B8186d7874934e12\",\n        nativeSymbol: \"EDU\",\n    },\n};\n// Allowed bridge paths\nconst ALLOWED_PATHS = [\n    { from: \"bsc\", to: \"arbitrum\" },\n    { from: \"arbitrum\", to: \"educhain\" },\n];\nconst BridgeWidget = ({ onClose, isPopup = false, defaultFromChain = \"bsc\", defaultToChain = \"arbitrum\", defaultAmount = \"0\", signer, onSuccess, onError, }) => {\n    // State\n    const [fromChain, setFromChain] = (0, react_1.useState)(defaultFromChain);\n    const [toChain, setToChain] = (0, react_1.useState)(defaultToChain);\n    const [amount, setAmount] = (0, react_1.useState)(defaultAmount);\n    const [loading, setLoading] = (0, react_1.useState)(false);\n    const [error, setError] = (0, react_1.useState)(null);\n    const [success, setSuccess] = (0, react_1.useState)(null);\n    const [step, setStep] = (0, react_1.useState)(\"input\");\n    const [fee, setFee] = (0, react_1.useState)(null);\n    const [balance, setBalance] = (0, react_1.useState)(null);\n    const [isApproved, setIsApproved] = (0, react_1.useState)(false);\n    const [currentSigner, setCurrentSigner] = (0, react_1.useState)(null);\n    const [userAddress, setUserAddress] = (0, react_1.useState)(null);\n    // Initialize signer and check wallet connection\n    (0, react_1.useEffect)(() => {\n        const initSigner = async () => {\n            if (signer) {\n                setCurrentSigner(signer);\n                const address = await signer.getAddress();\n                setUserAddress(address);\n                return;\n            }\n            // If no signer provided, try to get one from window.ethereum\n            if (typeof window !== \"undefined\" && window.ethereum) {\n                try {\n                    await window.ethereum.request({ method: \"eth_requestAccounts\" });\n                    const provider = new ethers_1.ethers.BrowserProvider(window.ethereum);\n                    const connectedSigner = await provider.getSigner();\n                    setCurrentSigner(connectedSigner);\n                    const address = await connectedSigner.getAddress();\n                    setUserAddress(address);\n                }\n                catch (err) {\n                    console.error(\"Failed to connect wallet:\", err);\n                    setError(\"Please connect your wallet to use the bridge.\");\n                }\n            }\n            else {\n                setError(\"No wallet detected. Please install MetaMask or another web3 wallet.\");\n            }\n        };\n        initSigner();\n    }, [signer]);\n    // Check if the selected path is valid\n    const isValidPath = ALLOWED_PATHS.some((path) => path.from === fromChain && path.to === toChain);\n    // Switch chains when from/to changes\n    (0, react_1.useEffect)(() => {\n        if (!isValidPath) {\n            // Find a valid path that includes the fromChain\n            const validPath = ALLOWED_PATHS.find((path) => path.from === fromChain);\n            if (validPath) {\n                setToChain(validPath.to);\n            }\n        }\n    }, [fromChain, isValidPath]);\n    // Update fee and balance when parameters change\n    (0, react_1.useEffect)(() => {\n        const updateFeeAndBalance = async () => {\n            if (!currentSigner ||\n                !userAddress ||\n                !isValidPath ||\n                !amount ||\n                parseFloat(amount) <= 0) {\n                return;\n            }\n            setLoading(true);\n            setError(null);\n            try {\n                // Create bridge instance\n                const bridge = new bridge_1.Bridge(currentSigner);\n                // Check balance\n                let hasEnough = false;\n                if (fromChain === \"bsc\") {\n                    hasEnough = await bridge.hasEnoughEdu(userAddress, amount);\n                    // Get fee for BSC to Arbitrum\n                    if (toChain === \"arbitrum\") {\n                        const estimatedFee = await bridge.estimateBridgeFee(amount, userAddress);\n                        setFee(`${estimatedFee} BNB`);\n                        // Check if approved\n                        const approved = await bridge.isEduApproved(userAddress, amount);\n                        setIsApproved(approved);\n                    }\n                }\n                else if (fromChain === \"arbitrum\") {\n                    hasEnough = await bridge.hasEnoughEduOnArb(userAddress, amount);\n                    // Check if approved for Arbitrum to EDUCHAIN\n                    if (toChain === \"educhain\") {\n                        const approved = await bridge.isEduApprovedOnArb(userAddress, amount);\n                        setIsApproved(approved);\n                        setFee(\"Gas fee only\");\n                    }\n                }\n                if (!hasEnough) {\n                    setError(`Insufficient EDU balance on ${CHAINS[fromChain].name}`);\n                }\n                else {\n                    setError(null);\n                }\n                // Get balance\n                const provider = currentSigner.provider;\n                const eduContract = new ethers_1.ethers.Contract(CHAINS[fromChain].eduAddress, [\n                    \"function balanceOf(address) view returns (uint256)\",\n                    \"function decimals() view returns (uint8)\",\n                ], provider);\n                const decimals = await eduContract.decimals();\n                const balanceWei = await eduContract.balanceOf(userAddress);\n                const balanceFormatted = ethers_1.ethers.formatUnits(balanceWei, decimals);\n                setBalance(balanceFormatted);\n            }\n            catch (err) {\n                console.error(\"Error updating fee and balance:\", err);\n                setError(\"Failed to get fee or balance information\");\n            }\n            finally {\n                setLoading(false);\n            }\n        };\n        updateFeeAndBalance();\n    }, [currentSigner, userAddress, fromChain, toChain, amount, isValidPath]);\n    // Handle chain switch\n    const handleChainSwitch = async () => {\n        if (!currentSigner)\n            return;\n        const provider = currentSigner.provider;\n        const network = await provider.getNetwork();\n        const currentChainId = network.chainId;\n        const targetChainId = CHAINS[fromChain].chainId;\n        if (currentChainId !== BigInt(targetChainId)) {\n            if (typeof window !== \"undefined\" && window.ethereum) {\n                try {\n                    await window.ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: `0x${targetChainId.toString(16)}` }],\n                    });\n                }\n                catch (err) {\n                    console.error(\"Failed to switch network:\", err);\n                    setError(`Please switch your wallet to ${CHAINS[fromChain].name} network`);\n                }\n            }\n        }\n    };\n    // Handle approval\n    const handleApprove = async () => {\n        if (!currentSigner || !userAddress)\n            return;\n        setLoading(true);\n        setError(null);\n        try {\n            const bridge = new bridge_1.Bridge(currentSigner);\n            // Approve based on the chain\n            let tx;\n            if (fromChain === \"bsc\") {\n                tx = await bridge.approveEdu(amount);\n            }\n            else if (fromChain === \"arbitrum\") {\n                tx = await bridge.approveEduOnArb(amount);\n            }\n            if (!tx) {\n                throw new Error(\"Failed to create approval transaction\");\n            }\n            setStep(\"approval\");\n            await tx.wait();\n            setIsApproved(true);\n            setStep(\"confirmation\");\n        }\n        catch (err) {\n            console.error(\"Approval failed:\", err);\n            setError(\"Failed to approve tokens\");\n        }\n        finally {\n            setLoading(false);\n        }\n    };\n    // Handle bridge\n    const handleBridge = async () => {\n        if (!currentSigner || !userAddress || !isValidPath)\n            return;\n        setLoading(true);\n        setError(null);\n        setStep(\"processing\");\n        try {\n            const bridge = new bridge_1.Bridge(currentSigner);\n            // Execute bridge based on the path\n            let tx;\n            if (fromChain === \"bsc\" && toChain === \"arbitrum\") {\n                tx = await bridge.bridgeEduFromBscToArb(amount, userAddress);\n            }\n            else if (fromChain === \"arbitrum\" && toChain === \"educhain\") {\n                tx = await bridge.bridgeEduFromArbToEdu(amount);\n            }\n            if (!tx) {\n                throw new Error(\"Failed to create bridge transaction\");\n            }\n            await tx.wait();\n            setSuccess(tx.hash);\n            setStep(\"complete\");\n            if (onSuccess) {\n                onSuccess(tx.hash);\n            }\n        }\n        catch (err) {\n            console.error(\"Bridge failed:\", err);\n            setError(\"Failed to bridge tokens\");\n            if (onError) {\n                onError(err);\n            }\n        }\n        finally {\n            setLoading(false);\n        }\n    };\n    // Render the widget\n    return (react_1.default.createElement(\"div\", { className: `bridge-widget ${isPopup ? \"bridge-widget-popup\" : \"\"}` },\n        isPopup && (react_1.default.createElement(\"div\", { className: \"bridge-widget-header\" },\n            react_1.default.createElement(\"h2\", null, \"Bridge EDU Tokens\"),\n            onClose && (react_1.default.createElement(\"button\", { className: \"bridge-widget-close\", onClick: onClose }, \"\\u00D7\")))),\n        react_1.default.createElement(\"div\", { className: \"bridge-widget-content\" },\n            react_1.default.createElement(\"h1\", null, \"Hello\"),\n            step === \"input\" && (react_1.default.createElement(react_1.default.Fragment, null,\n                react_1.default.createElement(\"div\", { className: \"bridge-widget-chains\" },\n                    react_1.default.createElement(\"div\", { className: \"bridge-widget-chain\" },\n                        react_1.default.createElement(\"label\", null, \"From\"),\n                        react_1.default.createElement(\"select\", { value: fromChain, onChange: (e) => setFromChain(e.target.value), disabled: loading }, Object.entries(CHAINS).map(([key, chain]) => (react_1.default.createElement(\"option\", { key: key, value: key }, chain.name))))),\n                    react_1.default.createElement(\"div\", { className: \"bridge-widget-chain-arrow\" }, \"\\u2192\"),\n                    react_1.default.createElement(\"div\", { className: \"bridge-widget-chain\" },\n                        react_1.default.createElement(\"label\", null, \"To\"),\n                        react_1.default.createElement(\"select\", { value: toChain, onChange: (e) => setToChain(e.target.value), disabled: loading }, Object.entries(CHAINS).map(([key, chain]) => (react_1.default.createElement(\"option\", { key: key, value: key, disabled: !ALLOWED_PATHS.some((path) => path.from === fromChain && path.to === key) }, chain.name)))))),\n                react_1.default.createElement(\"div\", { className: \"bridge-widget-amount\" },\n                    react_1.default.createElement(\"label\", null, \"Amount\"),\n                    react_1.default.createElement(\"div\", { className: \"bridge-widget-amount-input\" },\n                        react_1.default.createElement(\"input\", { type: \"number\", value: amount, onChange: (e) => setAmount(e.target.value), disabled: loading, placeholder: \"0.0\", min: \"0\", step: \"0.01\" }),\n                        react_1.default.createElement(\"span\", null, \"EDU\")),\n                    balance && (react_1.default.createElement(\"div\", { className: \"bridge-widget-balance\" },\n                        \"Balance: \",\n                        parseFloat(balance).toFixed(4),\n                        \" EDU\",\n                        react_1.default.createElement(\"button\", { onClick: () => setAmount(balance), className: \"bridge-widget-max-button\" }, \"MAX\")))),\n                fee && (react_1.default.createElement(\"div\", { className: \"bridge-widget-fee\" },\n                    \"Estimated Fee: \",\n                    fee)),\n                error && react_1.default.createElement(\"div\", { className: \"bridge-widget-error\" }, error),\n                react_1.default.createElement(\"div\", { className: \"bridge-widget-actions\" }, !currentSigner ? (react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-connect\", onClick: handleChainSwitch }, \"Connect Wallet\")) : !isApproved ? (react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-approve\", onClick: handleApprove, disabled: loading ||\n                        !!error ||\n                        !isValidPath ||\n                        !amount ||\n                        parseFloat(amount) <= 0 }, loading ? \"Approving...\" : \"Approve\")) : (react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-bridge\", onClick: handleBridge, disabled: loading ||\n                        !!error ||\n                        !isValidPath ||\n                        !amount ||\n                        parseFloat(amount) <= 0 }, loading ? \"Processing...\" : \"Bridge\"))))),\n            step === \"approval\" && (react_1.default.createElement(\"div\", { className: \"bridge-widget-step\" },\n                react_1.default.createElement(\"h3\", null, \"Approving Tokens\"),\n                react_1.default.createElement(\"div\", { className: \"bridge-widget-loader\" }),\n                react_1.default.createElement(\"p\", null, \"Please confirm the transaction in your wallet...\"))),\n            step === \"confirmation\" && (react_1.default.createElement(\"div\", { className: \"bridge-widget-step\" },\n                react_1.default.createElement(\"h3\", null, \"Ready to Bridge\"),\n                react_1.default.createElement(\"p\", null,\n                    \"You're about to bridge \",\n                    amount,\n                    \" EDU from \",\n                    CHAINS[fromChain].name,\n                    \" \",\n                    \"to \",\n                    CHAINS[toChain].name,\n                    \".\"),\n                fee && react_1.default.createElement(\"p\", null,\n                    \"Estimated Fee: \",\n                    fee),\n                react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-bridge\", onClick: handleBridge, disabled: loading }, loading ? \"Processing...\" : \"Confirm Bridge\"),\n                react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-back\", onClick: () => setStep(\"input\"), disabled: loading }, \"Back\"))),\n            step === \"processing\" && (react_1.default.createElement(\"div\", { className: \"bridge-widget-step\" },\n                react_1.default.createElement(\"h3\", null, \"Bridging in Progress\"),\n                react_1.default.createElement(\"div\", { className: \"bridge-widget-loader\" }),\n                react_1.default.createElement(\"p\", null, \"Please confirm the transaction in your wallet...\"))),\n            step === \"complete\" && (react_1.default.createElement(\"div\", { className: \"bridge-widget-step\" },\n                react_1.default.createElement(\"h3\", null, \"Bridge Successful!\"),\n                react_1.default.createElement(\"div\", { className: \"bridge-widget-success\" }, \"\\u2713\"),\n                react_1.default.createElement(\"p\", null,\n                    \"You've successfully initiated the bridge of \",\n                    amount,\n                    \" EDU from\",\n                    \" \",\n                    CHAINS[fromChain].name,\n                    \" to \",\n                    CHAINS[toChain].name,\n                    \".\"),\n                react_1.default.createElement(\"p\", null,\n                    \"The tokens will arrive in your wallet on \",\n                    CHAINS[toChain].name,\n                    \" \",\n                    \"shortly.\"),\n                success && (react_1.default.createElement(\"a\", { href: `${CHAINS[fromChain].explorerUrl}/tx/${success}`, target: \"_blank\", rel: \"noopener noreferrer\", className: \"bridge-widget-link\" }, \"View Transaction\")),\n                react_1.default.createElement(\"button\", { className: \"bridge-widget-button bridge-widget-new\", onClick: () => {\n                        setStep(\"input\");\n                        setSuccess(null);\n                        setAmount(\"0\");\n                    } }, \"New Bridge\")))),\n        react_1.default.createElement(\"div\", { className: \"bridge-widget-footer\" },\n            react_1.default.createElement(\"p\", null, \"Powered by SailFish DEX\")),\n        react_1.default.createElement(\"style\", null, `\n        .bridge-widget {\n          font-family: 'Inter', sans-serif;\n          background-color: #1a1b23;\n          color: #ffffff;\n          border-radius: 12px;\n          width: 100%;\n          max-width: 480px;\n          overflow: hidden;\n          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.25);\n        }\n\n        .bridge-widget-popup {\n          position: fixed;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          z-index: 1000;\n        }\n\n        .bridge-widget-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 16px 20px;\n          border-bottom: 1px solid #2d2e36;\n        }\n\n        .bridge-widget-header h2 {\n          margin: 0;\n          font-size: 18px;\n          font-weight: 600;\n        }\n\n        .bridge-widget-close {\n          background: none;\n          border: none;\n          color: #8f8f8f;\n          font-size: 24px;\n          cursor: pointer;\n        }\n\n        .bridge-widget-content {\n          padding: 24px;\n          min-height: 300px;\n        }\n\n        .bridge-widget-chains {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 24px;\n        }\n\n        .bridge-widget-chain {\n          flex: 1;\n        }\n\n        .bridge-widget-chain label {\n          display: block;\n          margin-bottom: 8px;\n          font-size: 14px;\n          color: #8f8f8f;\n        }\n\n        .bridge-widget-chain select {\n          width: 100%;\n          padding: 12px;\n          background-color: #2d2e36;\n          border: 1px solid #3a3b43;\n          border-radius: 8px;\n          color: #ffffff;\n          font-size: 16px;\n          appearance: none;\n          background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%238f8f8f' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\");\n          background-repeat: no-repeat;\n          background-position: right 12px center;\n        }\n\n        .bridge-widget-chain-arrow {\n          margin: 0 12px;\n          font-size: 20px;\n          color: #8f8f8f;\n        }\n\n        .bridge-widget-amount {\n          margin-bottom: 24px;\n        }\n\n        .bridge-widget-amount label {\n          display: block;\n          margin-bottom: 8px;\n          font-size: 14px;\n          color: #8f8f8f;\n        }\n\n        .bridge-widget-amount-input {\n          display: flex;\n          align-items: center;\n          background-color: #2d2e36;\n          border: 1px solid #3a3b43;\n          border-radius: 8px;\n          overflow: hidden;\n        }\n\n        .bridge-widget-amount-input input {\n          flex: 1;\n          padding: 12px;\n          background: transparent;\n          border: none;\n          color: #ffffff;\n          font-size: 16px;\n        }\n\n        .bridge-widget-amount-input span {\n          padding: 0 12px;\n          color: #8f8f8f;\n        }\n\n        .bridge-widget-balance {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-top: 8px;\n          font-size: 14px;\n          color: #8f8f8f;\n        }\n\n        .bridge-widget-max-button {\n          background: none;\n          border: none;\n          color: #3b82f6;\n          cursor: pointer;\n          font-size: 12px;\n          font-weight: 600;\n        }\n\n        .bridge-widget-fee {\n          margin-bottom: 24px;\n          padding: 12px;\n          background-color: #2d2e36;\n          border-radius: 8px;\n          font-size: 14px;\n        }\n\n        .bridge-widget-error {\n          margin-bottom: 24px;\n          padding: 12px;\n          background-color: rgba(239, 68, 68, 0.1);\n          border-left: 3px solid #ef4444;\n          border-radius: 4px;\n          color: #ef4444;\n          font-size: 14px;\n        }\n\n        .bridge-widget-actions {\n          display: flex;\n          justify-content: center;\n        }\n\n        .bridge-widget-button {\n          padding: 12px 24px;\n          border: none;\n          border-radius: 8px;\n          font-size: 16px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: background-color 0.2s;\n          width: 100%;\n        }\n\n        .bridge-widget-connect {\n          background-color: #3b82f6;\n          color: #ffffff;\n        }\n\n        .bridge-widget-approve {\n          background-color: #8b5cf6;\n          color: #ffffff;\n        }\n\n        .bridge-widget-bridge {\n          background-color: #10b981;\n          color: #ffffff;\n        }\n\n        .bridge-widget-back {\n          background-color: #6b7280;\n          color: #ffffff;\n          margin-top: 12px;\n        }\n\n        .bridge-widget-new {\n          background-color: #3b82f6;\n          color: #ffffff;\n        }\n\n        .bridge-widget-button:hover {\n          opacity: 0.9;\n        }\n\n        .bridge-widget-button:disabled {\n          background-color: #4b5563;\n          cursor: not-allowed;\n          opacity: 0.7;\n        }\n\n        .bridge-widget-step {\n          text-align: center;\n        }\n\n        .bridge-widget-step h3 {\n          margin-bottom: 24px;\n          font-size: 18px;\n          font-weight: 600;\n        }\n\n        .bridge-widget-loader {\n          margin: 0 auto 24px;\n          width: 48px;\n          height: 48px;\n          border: 4px solid rgba(59, 130, 246, 0.2);\n          border-left-color: #3b82f6;\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n        }\n\n        @keyframes spin {\n          to {\n            transform: rotate(360deg);\n          }\n        }\n\n        .bridge-widget-success {\n          margin: 0 auto 24px;\n          width: 48px;\n          height: 48px;\n          background-color: #10b981;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 24px;\n          color: #ffffff;\n        }\n\n        .bridge-widget-link {\n          display: inline-block;\n          margin: 16px 0;\n          color: #3b82f6;\n          text-decoration: none;\n        }\n\n        .bridge-widget-link:hover {\n          text-decoration: underline;\n        }\n\n        .bridge-widget-footer {\n          padding: 12px 24px;\n          border-top: 1px solid #2d2e36;\n          text-align: center;\n          font-size: 12px;\n          color: #8f8f8f;\n        }\n      `)));\n};\nexports[\"default\"] = BridgeWidget;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../dist/ui/BridgeWidget.js\n"));

/***/ })

});